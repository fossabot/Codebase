{"version":3,"sources":["../../../../../../../../libs/movie/data-access/node_modules/type/test/array-like/ensure.js"],"sourcesContent":["\"use strict\";\n\nvar assert          = require(\"chai\").assert\n  , ensureArrayLike = require(\"../../array-like/ensure\");\n\ndescribe(\"array-like/ensure\", function () {\n\tit(\"Should return input value\", function () {\n\t\tvar value = [];\n\t\tassert.equal(ensureArrayLike(value), value);\n\t});\n\tit(\"Should allow strings with allowString option\", function () {\n\t\tvar value = \"foo\";\n\t\tassert.equal(ensureArrayLike(value, { allowString: true }), value);\n\t});\n\tit(\"Should crash on invalid value\", function () {\n\t\ttry {\n\t\t\tensureArrayLike(\"foo\");\n\t\t\tthrow new Error(\"Unexpected\");\n\t\t} catch (error) {\n\t\t\tassert.equal(error.name, \"TypeError\");\n\t\t\tassert(error.message.includes(\"is not an array like value\"));\n\t\t}\n\t});\n});\n"],"names":["assert","require","ensureArrayLike","describe","it","value","equal","allowString","Error","error","name","message","includes"],"mappings":"AAAA,CAAY;AAEZ,GAAG,CAACA,MAAM,GAAYC,OAAO,CAAC,CAAM,OAAED,MAAM,EACxCE,eAAe,GAAGD,OAAO,CAAC,CAAyB;AAEvDE,QAAQ,CAAC,CAAmB,oBAAE,QAAQ,GAAI,CAAC;IAC1CC,EAAE,CAAC,CAA2B,4BAAE,QAAQ,GAAI,CAAC;QAC5C,GAAG,CAACC,KAAK,GAAG,CAAC,CAAC;QACdL,MAAM,CAACM,KAAK,CAACJ,eAAe,CAACG,KAAK,GAAGA,KAAK;IAC3C,CAAC;IACDD,EAAE,CAAC,CAA8C,+CAAE,QAAQ,GAAI,CAAC;QAC/D,GAAG,CAACC,KAAK,GAAG,CAAK;QACjBL,MAAM,CAACM,KAAK,CAACJ,eAAe,CAACG,KAAK,EAAE,CAAC;YAACE,WAAW,EAAE,IAAI;QAAC,CAAC,GAAGF,KAAK;IAClE,CAAC;IACDD,EAAE,CAAC,CAA+B,gCAAE,QAAQ,GAAI,CAAC;QAChD,GAAG,CAAC,CAAC;YACJF,eAAe,CAAC,CAAK;YACrB,KAAK,CAAC,GAAG,CAACM,KAAK,CAAC,CAAY;QAC7B,CAAC,CAAC,KAAK,EAAEC,KAAK,EAAE,CAAC;YAChBT,MAAM,CAACM,KAAK,CAACG,KAAK,CAACC,IAAI,EAAE,CAAW;YACpCV,MAAM,CAACS,KAAK,CAACE,OAAO,CAACC,QAAQ,CAAC,CAA4B;QAC3D,CAAC;IACF,CAAC;AACF,CAAC"}