{"version":3,"sources":["../../../../../../../../libs/movie/data-access/node_modules/react-query/es/react/useQueries.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { QueriesObserver } from '../core/queriesObserver';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useQueries(queries) {\n  var mountedRef = React.useRef(false);\n\n  var _React$useState = React.useState(0),\n      forceUpdate = _React$useState[1];\n\n  var queryClient = useQueryClient();\n  var defaultedQueries = useMemo(function () {\n    return queries.map(function (options) {\n      var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Make sure the results are already in fetching state before subscribing or updating options\n\n      defaultedOptions.optimisticResults = true;\n      return defaultedOptions;\n    });\n  }, [queries, queryClient]);\n\n  var _React$useState2 = React.useState(function () {\n    return new QueriesObserver(queryClient, defaultedQueries);\n  }),\n      observer = _React$useState2[0];\n\n  var result = observer.getOptimisticResult(defaultedQueries);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    var unsubscribe = observer.subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        forceUpdate(function (x) {\n          return x + 1;\n        });\n      }\n    }));\n    return function () {\n      mountedRef.current = false;\n      unsubscribe();\n    };\n  }, [observer]);\n  React.useEffect(function () {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, {\n      listeners: false\n    });\n  }, [defaultedQueries, observer]);\n  return result;\n}"],"names":["useQueries","queries","mountedRef","React","useRef","_React$useState","useState","forceUpdate","queryClient","useQueryClient","defaultedQueries","useMemo","map","options","defaultedOptions","defaultQueryObserverOptions","optimisticResults","_React$useState2","QueriesObserver","observer","result","getOptimisticResult","useEffect","current","unsubscribe","subscribe","notifyManager","batchCalls","x","setQueries","listeners"],"mappings":";QAIgBA,UAAU,GAAVA,UAAU;AAJK,GAAO,CAAP,MAAO;AACR,GAAuB,CAAvB,cAAuB;AACrB,GAAyB,CAAzB,gBAAyB;AAC1B,GAAuB,CAAvB,oBAAuB;SACtCA,UAAU,CAACC,OAAO,EAAE,CAAC;IACnC,GAAG,CAACC,UAAU,GAAGC,MAAK,SAACC,MAAM,CAAC,KAAK;IAEnC,GAAG,CAACC,eAAe,GAAGF,MAAK,SAACG,QAAQ,CAAC,CAAC,GAClCC,WAAW,GAAGF,eAAe,CAAC,CAAC;IAEnC,GAAG,CAACG,WAAW,OAAGC,oBAAc;IAChC,GAAG,CAACC,gBAAgB,OAAGC,MAAO,UAAC,QAAQ,GAAI,CAAC;QAC1C,MAAM,CAACV,OAAO,CAACW,GAAG,CAAC,QAAQ,CAAEC,OAAO,EAAE,CAAC;YACrC,GAAG,CAACC,gBAAgB,GAAGN,WAAW,CAACO,2BAA2B,CAACF,OAAO,EAAG,CAA6F,AAA7F,EAA6F,AAA7F,2FAA6F;YAEtKC,gBAAgB,CAACE,iBAAiB,GAAG,IAAI;YACzC,MAAM,CAACF,gBAAgB;QACzB,CAAC;IACH,CAAC,EAAE,CAACb;QAAAA,OAAO;QAAEO,WAAW;IAAA,CAAC;IAEzB,GAAG,CAACS,gBAAgB,GAAGd,MAAK,SAACG,QAAQ,CAAC,QAAQ,GAAI,CAAC;QACjD,MAAM,CAAC,GAAG,CAACY,gBAAe,iBAACV,WAAW,EAAEE,gBAAgB;IAC1D,CAAC,GACGS,QAAQ,GAAGF,gBAAgB,CAAC,CAAC;IAEjC,GAAG,CAACG,MAAM,GAAGD,QAAQ,CAACE,mBAAmB,CAACX,gBAAgB;IAC1DP,MAAK,SAACmB,SAAS,CAAC,QAAQ,GAAI,CAAC;QAC3BpB,UAAU,CAACqB,OAAO,GAAG,IAAI;QACzB,GAAG,CAACC,WAAW,GAAGL,QAAQ,CAACM,SAAS,CAACC,cAAa,eAACC,UAAU,CAAC,QAAQ,GAAI,CAAC;YACzE,EAAE,EAAEzB,UAAU,CAACqB,OAAO,EAAE,CAAC;gBACvBhB,WAAW,CAAC,QAAQ,CAAEqB,CAAC,EAAE,CAAC;oBACxB,MAAM,CAACA,CAAC,GAAG,CAAC;gBACd,CAAC;YACH,CAAC;QACH,CAAC;QACD,MAAM,CAAC,QAAQ,GAAI,CAAC;YAClB1B,UAAU,CAACqB,OAAO,GAAG,KAAK;YAC1BC,WAAW;QACb,CAAC;IACH,CAAC,EAAE,CAACL;QAAAA,QAAQ;IAAA,CAAC;IACbhB,MAAK,SAACmB,SAAS,CAAC,QAAQ,GAAI,CAAC;QAC3B,EAAqE,AAArE,mEAAqE;QACrE,EAAsE,AAAtE,oEAAsE;QACtEH,QAAQ,CAACU,UAAU,CAACnB,gBAAgB,EAAE,CAAC;YACrCoB,SAAS,EAAE,KAAK;QAClB,CAAC;IACH,CAAC,EAAE,CAACpB;QAAAA,gBAAgB;QAAES,QAAQ;IAAA,CAAC;IAC/B,MAAM,CAACC,MAAM;AACf,CAAC"}