{"version":3,"sources":["../../../../../../../../libs/movie/data-access/node_modules/react-query/types/core/queryObserver.d.ts"],"sourcesContent":["import { RefetchQueryFilters } from './types';\nimport { QueryKey, QueryObserverOptions, QueryObserverResult, RefetchOptions, ResultOptions } from './types';\nimport { Query, Action, FetchOptions } from './query';\nimport { QueryClient } from './queryClient';\nimport { Subscribable } from './subscribable';\ndeclare type QueryObserverListener<TData, TError> = (result: QueryObserverResult<TData, TError>) => void;\nexport interface NotifyOptions {\n    cache?: boolean;\n    listeners?: boolean;\n    onError?: boolean;\n    onSuccess?: boolean;\n}\nexport interface ObserverFetchOptions extends FetchOptions {\n    throwOnError?: boolean;\n}\nexport declare class QueryObserver<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryData = TQueryFnData, TQueryKey extends QueryKey = QueryKey> extends Subscribable<QueryObserverListener<TData, TError>> {\n    options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>;\n    private client;\n    private currentQuery;\n    private currentQueryInitialState;\n    private currentResult;\n    private currentResultState?;\n    private currentResultOptions?;\n    private previousQueryResult?;\n    private previousSelectError;\n    private previousSelect?;\n    private staleTimeoutId?;\n    private refetchIntervalId?;\n    private currentRefetchInterval?;\n    private trackedProps;\n    constructor(client: QueryClient, options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>);\n    protected bindMethods(): void;\n    protected onSubscribe(): void;\n    protected onUnsubscribe(): void;\n    shouldFetchOnReconnect(): boolean;\n    shouldFetchOnWindowFocus(): boolean;\n    destroy(): void;\n    setOptions(options?: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>, notifyOptions?: NotifyOptions): void;\n    getOptimisticResult(options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>): QueryObserverResult<TData, TError>;\n    getCurrentResult(): QueryObserverResult<TData, TError>;\n    trackResult(result: QueryObserverResult<TData, TError>, defaultedOptions: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>): QueryObserverResult<TData, TError>;\n    getNextResult(options?: ResultOptions): Promise<QueryObserverResult<TData, TError>>;\n    getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey>;\n    remove(): void;\n    refetch<TPageData>(options?: RefetchOptions & RefetchQueryFilters<TPageData>): Promise<QueryObserverResult<TData, TError>>;\n    fetchOptimistic(options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>): Promise<QueryObserverResult<TData, TError>>;\n    protected fetch(fetchOptions?: ObserverFetchOptions): Promise<QueryObserverResult<TData, TError>>;\n    private executeFetch;\n    private updateStaleTimeout;\n    private computeRefetchInterval;\n    private updateRefetchInterval;\n    private updateTimers;\n    private clearTimers;\n    private clearStaleTimeout;\n    private clearRefetchInterval;\n    protected createResult(query: Query<TQueryFnData, TError, TQueryData, TQueryKey>, options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>): QueryObserverResult<TData, TError>;\n    private shouldNotifyListeners;\n    updateResult(notifyOptions?: NotifyOptions): void;\n    private updateQuery;\n    onQueryUpdate(action: Action<TData, TError>): void;\n    private notify;\n}\nexport {};\n"],"names":[],"mappings":";AAI6B,GAAgB,CAAhB,aAAgB"}