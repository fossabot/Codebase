{"version":3,"sources":["../../../../../../../../libs/movie/data-access/node_modules/react-query/types/core/mutationObserver.d.ts"],"sourcesContent":["import { Action } from './mutation';\nimport { QueryClient } from './queryClient';\nimport { Subscribable } from './subscribable';\nimport { MutateOptions, MutationObserverResult, MutationObserverOptions } from './types';\ndeclare type MutationObserverListener<TData, TError, TVariables, TContext> = (result: MutationObserverResult<TData, TError, TVariables, TContext>) => void;\nexport declare class MutationObserver<TData = unknown, TError = unknown, TVariables = void, TContext = unknown> extends Subscribable<MutationObserverListener<TData, TError, TVariables, TContext>> {\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>;\n    private client;\n    private currentResult;\n    private currentMutation?;\n    private mutateOptions?;\n    constructor(client: QueryClient, options: MutationObserverOptions<TData, TError, TVariables, TContext>);\n    protected bindMethods(): void;\n    setOptions(options?: MutationObserverOptions<TData, TError, TVariables, TContext>): void;\n    protected onUnsubscribe(): void;\n    onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void;\n    getCurrentResult(): MutationObserverResult<TData, TError, TVariables, TContext>;\n    reset(): void;\n    mutate(variables?: TVariables, options?: MutateOptions<TData, TError, TVariables, TContext>): Promise<TData>;\n    private updateResult;\n    private notify;\n}\nexport {};\n"],"names":[],"mappings":";AAE6B,GAAgB,CAAhB,aAAgB"}