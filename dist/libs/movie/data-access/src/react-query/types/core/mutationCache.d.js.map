{"version":3,"sources":["../../../../../../../../libs/movie/data-access/node_modules/react-query/types/core/mutationCache.d.ts"],"sourcesContent":["import { MutationOptions } from './types';\nimport { QueryClient } from './queryClient';\nimport { Mutation, MutationState } from './mutation';\nimport { MutationFilters } from './utils';\nimport { Subscribable } from './subscribable';\ninterface MutationCacheConfig {\n    onError?: (error: unknown, variables: unknown, context: unknown, mutation: Mutation<unknown, unknown, unknown, unknown>) => void;\n    onSuccess?: (data: unknown, variables: unknown, context: unknown, mutation: Mutation<unknown, unknown, unknown, unknown>) => void;\n    onMutate?: (variables: unknown, mutation: Mutation<unknown, unknown, unknown, unknown>) => void;\n}\ndeclare type MutationCacheListener = (mutation?: Mutation) => void;\nexport declare class MutationCache extends Subscribable<MutationCacheListener> {\n    config: MutationCacheConfig;\n    private mutations;\n    private mutationId;\n    constructor(config?: MutationCacheConfig);\n    build<TData, TError, TVariables, TContext>(client: QueryClient, options: MutationOptions<TData, TError, TVariables, TContext>, state?: MutationState<TData, TError, TVariables, TContext>): Mutation<TData, TError, TVariables, TContext>;\n    add(mutation: Mutation<any, any, any, any>): void;\n    remove(mutation: Mutation<any, any, any, any>): void;\n    clear(): void;\n    getAll(): Mutation[];\n    find<TData = unknown, TError = unknown, TVariables = any, TContext = unknown>(filters: MutationFilters): Mutation<TData, TError, TVariables, TContext> | undefined;\n    findAll(filters: MutationFilters): Mutation[];\n    notify(mutation?: Mutation<any, any, any, any>): void;\n    onFocus(): void;\n    onOnline(): void;\n    resumePausedMutations(): Promise<void>;\n}\nexport {};\n"],"names":[],"mappings":";AAI6B,GAAgB,CAAhB,aAAgB"}