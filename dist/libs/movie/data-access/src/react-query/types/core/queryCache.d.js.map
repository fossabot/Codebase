{"version":3,"sources":["../../../../../../../../libs/movie/data-access/node_modules/react-query/types/core/queryCache.d.ts"],"sourcesContent":["import { QueryFilters } from './utils';\nimport { Action, Query, QueryState } from './query';\nimport { QueryKey, QueryOptions } from './types';\nimport { QueryClient } from './queryClient';\nimport { Subscribable } from './subscribable';\nimport { QueryObserver } from './queryObserver';\ninterface QueryCacheConfig {\n    onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void;\n    onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void;\n}\ninterface NotifyEventQueryAdded {\n    type: 'queryAdded';\n    query: Query<any, any, any, any>;\n}\ninterface NotifyEventQueryRemoved {\n    type: 'queryRemoved';\n    query: Query<any, any, any, any>;\n}\ninterface NotifyEventQueryUpdated {\n    type: 'queryUpdated';\n    query: Query<any, any, any, any>;\n    action: Action<any, any>;\n}\ninterface NotifyEventObserverAdded {\n    type: 'observerAdded';\n    query: Query<any, any, any, any>;\n    observer: QueryObserver<any, any, any, any, any>;\n}\ninterface NotifyEventObserverRemoved {\n    type: 'observerRemoved';\n    query: Query<any, any, any, any>;\n    observer: QueryObserver<any, any, any, any, any>;\n}\ninterface NotifyEventObserverResultsUpdated {\n    type: 'observerResultsUpdated';\n    query: Query<any, any, any, any>;\n}\ndeclare type QueryCacheNotifyEvent = NotifyEventQueryAdded | NotifyEventQueryRemoved | NotifyEventQueryUpdated | NotifyEventObserverAdded | NotifyEventObserverRemoved | NotifyEventObserverResultsUpdated;\ndeclare type QueryCacheListener = (event?: QueryCacheNotifyEvent) => void;\nexport declare class QueryCache extends Subscribable<QueryCacheListener> {\n    config: QueryCacheConfig;\n    private queries;\n    private queriesMap;\n    constructor(config?: QueryCacheConfig);\n    build<TQueryFnData, TError, TData, TQueryKey extends QueryKey>(client: QueryClient, options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>, state?: QueryState<TData, TError>): Query<TQueryFnData, TError, TData, TQueryKey>;\n    add(query: Query<any, any, any, any>): void;\n    remove(query: Query<any, any, any, any>): void;\n    clear(): void;\n    get<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueyKey extends QueryKey = QueryKey>(queryHash: string): Query<TQueryFnData, TError, TData, TQueyKey> | undefined;\n    getAll(): Query[];\n    find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(arg1: QueryKey, arg2?: QueryFilters): Query<TQueryFnData, TError, TData> | undefined;\n    findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[];\n    findAll(filters?: QueryFilters): Query[];\n    findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[];\n    notify(event: QueryCacheNotifyEvent): void;\n    onFocus(): void;\n    onOnline(): void;\n}\nexport {};\n"],"names":[],"mappings":";AAI6B,GAAgB,CAAhB,aAAgB"}