{"version":3,"sources":["../../../../../../../../libs/movie/data-access/node_modules/react-query/types/core/infiniteQueryObserver.d.ts"],"sourcesContent":["import { FetchNextPageOptions, FetchPreviousPageOptions, InfiniteData, InfiniteQueryObserverOptions, InfiniteQueryObserverResult } from './types';\nimport { QueryClient } from './queryClient';\nimport { NotifyOptions, ObserverFetchOptions, QueryObserver } from './queryObserver';\nimport { Query } from './query';\ndeclare type InfiniteQueryObserverListener<TData, TError> = (result: InfiniteQueryObserverResult<TData, TError>) => void;\nexport declare class InfiniteQueryObserver<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryData = TQueryFnData> extends QueryObserver<TQueryFnData, TError, InfiniteData<TData>, InfiniteData<TQueryData>> {\n    subscribe: (listener?: InfiniteQueryObserverListener<TData, TError>) => () => void;\n    getCurrentResult: () => InfiniteQueryObserverResult<TData, TError>;\n    protected fetch: (fetchOptions?: ObserverFetchOptions) => Promise<InfiniteQueryObserverResult<TData, TError>>;\n    constructor(client: QueryClient, options: InfiniteQueryObserverOptions<TQueryFnData, TError, TData, TQueryData>);\n    protected bindMethods(): void;\n    setOptions(options?: InfiniteQueryObserverOptions<TQueryFnData, TError, TData, TQueryData>, notifyOptions?: NotifyOptions): void;\n    getOptimisticResult(options: InfiniteQueryObserverOptions<TQueryFnData, TError, TData, TQueryData>): InfiniteQueryObserverResult<TData, TError>;\n    fetchNextPage(options?: FetchNextPageOptions): Promise<InfiniteQueryObserverResult<TData, TError>>;\n    fetchPreviousPage(options?: FetchPreviousPageOptions): Promise<InfiniteQueryObserverResult<TData, TError>>;\n    protected createResult(query: Query<TQueryFnData, TError, InfiniteData<TQueryData>>, options: InfiniteQueryObserverOptions<TQueryFnData, TError, TData, TQueryData>): InfiniteQueryObserverResult<TData, TError>;\n}\nexport {};\n"],"names":[],"mappings":";AAEmE,GAAiB,CAAjB,cAAiB"}