{"version":3,"sources":["../../../../../../../../libs/movie/data-access/node_modules/react-query/types/devtools/utils.d.ts"],"sourcesContent":["import React from 'react';\nimport { Query } from '../core';\nimport { Theme } from './theme';\nexport declare const isServer: boolean;\ndeclare type StyledComponent<T> = T extends 'button' ? React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> : T extends 'input' ? React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> : T extends 'select' ? React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement> : T extends keyof HTMLElementTagNameMap ? React.HTMLAttributes<HTMLElementTagNameMap[T]> : never;\nexport declare function getQueryStatusColor(query: Query, theme: Theme): \"#3f4e60\" | \"#00ab52\" | \"#006bff\" | \"#ffb200\";\nexport declare function getQueryStatusLabel(query: Query): \"inactive\" | \"fetching\" | \"stale\" | \"fresh\";\ndeclare type Styles = React.CSSProperties | ((props: Record<string, any>, theme: Theme) => React.CSSProperties);\nexport declare function styled<T extends keyof HTMLElementTagNameMap>(type: T, newStyles: Styles, queries?: Record<string, Styles>): React.ForwardRefExoticComponent<React.PropsWithoutRef<StyledComponent<T>> & React.RefAttributes<HTMLElementTagNameMap[T]>>;\nexport declare function useIsMounted(): () => boolean;\n/**\n * This hook is a safe useState version which schedules state updates in microtasks\n * to prevent updating a component state while React is rendering different components\n * or when the component is not mounted anymore.\n */\nexport declare function useSafeState<T>(initialState: T): [T, (value: T) => void];\nexport {};\n"],"names":[],"mappings":";AAAkB,GAAO,CAAP,MAAO"}