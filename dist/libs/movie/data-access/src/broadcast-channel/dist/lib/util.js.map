{"version":3,"sources":["../../../../../../../../libs/movie/data-access/node_modules/broadcast-channel/dist/lib/util.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isPromise = isPromise;\nexports.sleep = sleep;\nexports.randomInt = randomInt;\nexports.randomToken = randomToken;\nexports.microSeconds = microSeconds;\nexports.isNode = void 0;\n\n/**\n * returns true if the given object is a promise\n */\nfunction isPromise(obj) {\n  if (obj && typeof obj.then === 'function') {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction sleep(time) {\n  if (!time) time = 0;\n  return new Promise(function (res) {\n    return setTimeout(res, time);\n  });\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n/**\n * https://stackoverflow.com/a/8084248\n */\n\n\nfunction randomToken() {\n  return Math.random().toString(36).substring(2);\n}\n\nvar lastMs = 0;\nvar additional = 0;\n/**\n * returns the current time in micro-seconds,\n * WARNING: This is a pseudo-function\n * Performance.now is not reliable in webworkers, so we just make sure to never return the same time.\n * This is enough in browsers, and this function will not be used in nodejs.\n * The main reason for this hack is to ensure that BroadcastChannel behaves equal to production when it is used in fast-running unit tests.\n */\n\nfunction microSeconds() {\n  var ms = new Date().getTime();\n\n  if (ms === lastMs) {\n    additional++;\n    return ms * 1000 + additional;\n  } else {\n    lastMs = ms;\n    additional = 0;\n    return ms * 1000;\n  }\n}\n/**\n * copied from the 'detect-node' npm module\n * We cannot use the module directly because it causes problems with rollup\n * @link https://github.com/iliakan/detect-node/blob/master/index.js\n */\n\n\nvar isNode = Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\nexports.isNode = isNode;"],"names":["Object","defineProperty","exports","value","isPromise","sleep","randomInt","randomToken","microSeconds","isNode","obj","then","time","Promise","res","setTimeout","min","max","Math","floor","random","toString","substring","lastMs","additional","ms","Date","getTime","prototype","call","process"],"mappings":"AAAA,CAAY;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,CAAY,aAAE,CAAC;IAC5CC,KAAK,EAAE,IAAI;AACb,CAAC;AACDD,OAAO,CAACE,SAAS,GAAGA,SAAS;AAC7BF,OAAO,CAACG,KAAK,GAAGA,KAAK;AACrBH,OAAO,CAACI,SAAS,GAAGA,SAAS;AAC7BJ,OAAO,CAACK,WAAW,GAAGA,WAAW;AACjCL,OAAO,CAACM,YAAY,GAAGA,YAAY;AACnCN,OAAO,CAACO,MAAM,GAAG,IAAI,CAAC,CAAC;AAEvB,EAEG,AAFH;;CAEG,AAFH,EAEG,UACML,SAAS,CAACM,GAAG,EAAE,CAAC;IACvB,EAAE,EAAEA,GAAG,IAAI,MAAM,CAACA,GAAG,CAACC,IAAI,KAAK,CAAU,WAAE,CAAC;QAC1C,MAAM,CAAC,IAAI;IACb,CAAC,MAAM,CAAC;QACN,MAAM,CAAC,KAAK;IACd,CAAC;AACH,CAAC;SAEQN,KAAK,CAACO,IAAI,EAAE,CAAC;IACpB,EAAE,GAAGA,IAAI,EAAEA,IAAI,GAAG,CAAC;IACnB,MAAM,CAAC,GAAG,CAACC,OAAO,CAAC,QAAQ,CAAEC,GAAG,EAAE,CAAC;QACjC,MAAM,CAACC,UAAU,CAACD,GAAG,EAAEF,IAAI;IAC7B,CAAC;AACH,CAAC;SAEQN,SAAS,CAACU,GAAG,EAAEC,GAAG,EAAE,CAAC;IAC5B,MAAM,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,MAAMH,GAAG,GAAGD,GAAG,GAAG,CAAC,IAAIA,GAAG;AACzD,CAAC;AACD,EAEG,AAFH;;CAEG,AAFH,EAEG,UAGMT,WAAW,GAAG,CAAC;IACtB,MAAM,CAACW,IAAI,CAACE,MAAM,GAAGC,QAAQ,CAAC,EAAE,EAAEC,SAAS,CAAC,CAAC;AAC/C,CAAC;AAED,GAAG,CAACC,MAAM,GAAG,CAAC;AACd,GAAG,CAACC,UAAU,GAAG,CAAC;AAClB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,UAEMhB,YAAY,GAAG,CAAC;IACvB,GAAG,CAACiB,EAAE,GAAG,GAAG,CAACC,IAAI,GAAGC,OAAO;IAE3B,EAAE,EAAEF,EAAE,KAAKF,MAAM,EAAE,CAAC;QAClBC,UAAU;QACV,MAAM,CAACC,EAAE,GAAG,IAAI,GAAGD,UAAU;IAC/B,CAAC,MAAM,CAAC;QACND,MAAM,GAAGE,EAAE;QACXD,UAAU,GAAG,CAAC;QACd,MAAM,CAACC,EAAE,GAAG,IAAI;IAClB,CAAC;AACH,CAAC;AACD,EAIG,AAJH;;;;CAIG,AAJH,EAIG,CAGH,GAAG,CAAChB,MAAM,GAAGT,MAAM,CAAC4B,SAAS,CAACP,QAAQ,CAACQ,IAAI,CAAC,MAAM,CAACC,OAAO,KAAK,CAAW,aAAGA,OAAO,GAAG,CAAC,MAAM,CAAkB;AAChH5B,OAAO,CAACO,MAAM,GAAGA,MAAM"}