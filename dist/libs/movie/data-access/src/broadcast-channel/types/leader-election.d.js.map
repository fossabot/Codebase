{"version":3,"sources":["../../../../../../../libs/movie/data-access/node_modules/broadcast-channel/types/leader-election.d.ts"],"sourcesContent":["import {\n    BroadcastChannel,\n    OnMessageHandler\n} from './broadcast-channel';\n\nexport type LeaderElectionOptions = {\n    /**\n     * This value decides how often instances will renegotiate who is leader.\n     * Probably should be at least 2x bigger than responseTime.\n     */\n    fallbackInterval?: number;\n    /**\n     * This timer value is used when resolving which instance should be leader.\n     * In case when your application elects more than one leader increase this value.\n     */\n    responseTime?: number;\n};\n\nexport declare class LeaderElector {\n\n    /**\n     * IMPORTANT: The leader election is lazy,\n     * it will not start before you call awaitLeadership()\n     * so isLeader will never become true then\n     */\n    readonly isLeader: boolean;\n\n    readonly isDead: boolean;\n    readonly token: string;\n\n    applyOnce(): Promise<boolean>;\n    awaitLeadership(): Promise<void>;\n    die(): Promise<void>;\n\n    /**\n     * Add an event handler that is run\n     * when it is detected that there are duplicate leaders\n     */\n    onduplicate: OnMessageHandler<any>;\n}\n\ntype CreateFunction = (channel: BroadcastChannel, options?: LeaderElectionOptions) => LeaderElector;\n\nexport const createLeaderElection: CreateFunction;\n"],"names":["createLeaderElection"],"mappings":";;AA2CO,KAAK,CAACA,oBAAoB;QAApBA,oBAAoB,GAApBA,oBAAoB"}