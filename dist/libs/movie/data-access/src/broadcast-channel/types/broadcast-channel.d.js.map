{"version":3,"sources":["../../../../../../../libs/movie/data-access/node_modules/broadcast-channel/types/broadcast-channel.d.ts"],"sourcesContent":["declare type MethodType = 'node' | 'idb' | 'native' | 'localstorage' | 'simulate';\n\n\n\ninterface BroadcastChannelEventMap {\n    \"message\": MessageEvent;\n    \"messageerror\": MessageEvent;\n}\n\nexport interface BroadcastMethod<State = object> {\n    type: string;\n    microSeconds(): number;\n    create(channelName: string, options: BroadcastChannelOptions): Promise<State> | State;\n    close(channelState: State): void;\n    onMessage(channelState: State, callback: (args: any) => void): void;\n    postMessage(channelState: State, message: any): Promise<any>;\n    canBeUsed(): boolean;\n    averageResponseTime(): number;\n}\n\nexport type BroadcastChannelOptions = {\n    type?: MethodType,\n    methods?: BroadcastMethod[] | BroadcastMethod,\n    webWorkerSupport?: boolean;\n    prepareDelay?: number;\n    node?: {\n        ttl?: number;\n        useFastPath?: boolean;\n    };\n    idb?: {\n        ttl?: number;\n        fallbackInterval?: number;\n        onclose?: () => void;\n    };\n};\n\ndeclare type EventContext = 'message' | 'internal' | 'leader';\n\ndeclare type OnMessageHandler<T> = ((this: BroadcastChannel, ev: T) => any) | null;\n\n/**\n * api as defined in\n * @link https://html.spec.whatwg.org/multipage/web-messaging.html#broadcasting-to-other-browsing-contexts\n * @link https://github.com/Microsoft/TypeScript/blob/master/src/lib/webworker.generated.d.ts#L325\n */\nexport class BroadcastChannel<T = any> {\n    constructor(name: string, opts?: BroadcastChannelOptions);\n    readonly name: string;\n    readonly options: BroadcastChannelOptions;\n    readonly type: MethodType;\n    readonly isClosed: boolean;\n\n    postMessage(msg: T): Promise<void>;\n    close(): Promise<void>;\n\n    onmessage: OnMessageHandler<T>;\n\n    // not defined in the offical standard\n    addEventListener(type: EventContext, handler: OnMessageHandler<T>): void;\n    removeEventListener(type: EventContext, handler: OnMessageHandler<T>): void;\n\n}\n// statics\nexport function clearNodeFolder(opts?: BroadcastChannelOptions): Promise<boolean>;\nexport function enforceOptions(opts?: BroadcastChannelOptions | false | null): void;\n"],"names":["BroadcastChannel"],"mappings":";AA6CO,GAAK,CAACA,gBAAgB,SAAhBA,gBAAgB;;QAAhBA,gBAAgB,GAAhBA,gBAAgB"}