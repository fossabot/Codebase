{"version":3,"sources":["../../../../../../../libs/movie/data-access/node_modules/broadcast-channel/src/method-chooser.js"],"sourcesContent":["import NativeMethod from './methods/native.js';\nimport IndexeDbMethod from './methods/indexed-db.js';\nimport LocalstorageMethod from './methods/localstorage.js';\nimport SimulateMethod from './methods/simulate.js';\n\nimport {\n    isNode\n} from './util';\n\n// order is important\nconst METHODS = [\n    NativeMethod, // fastest\n    IndexeDbMethod,\n    LocalstorageMethod\n];\n\n/**\n * The NodeMethod is loaded lazy\n * so it will not get bundled in browser-builds\n */\nif (isNode) {\n\n    /**\n     * we use the non-transpiled code for nodejs\n     * because it runs faster\n     */\n    const NodeMethod = require(\n        '../../src/methods/' +\n        // use this hack so that browserify and others\n        // do not import the node-method by default\n        // when bundling.\n        'node.js'\n    );\n\n    /**\n     * this will be false for webpackbuilds\n     * which will shim the node-method with an empty object {}\n     */\n    if (typeof NodeMethod.canBeUsed === 'function') {\n        METHODS.push(NodeMethod);\n    }\n}\n\n\nexport function chooseMethod(options) {\n    let chooseMethods = [].concat(options.methods, METHODS).filter(Boolean);\n\n    // directly chosen\n    if (options.type) {\n        if (options.type === 'simulate') {\n            // only use simulate-method if directly chosen\n            return SimulateMethod;\n        }\n        const ret = chooseMethods.find(m => m.type === options.type);\n        if (!ret) throw new Error('method-type ' + options.type + ' not found');\n        else return ret;\n    }\n\n    /**\n     * if no webworker support is needed,\n     * remove idb from the list so that localstorage is been chosen\n     */\n    if (!options.webWorkerSupport && !isNode) {\n        chooseMethods = chooseMethods.filter(m => m.type !== 'idb');\n    }\n\n    const useMethod = chooseMethods.find(method => method.canBeUsed());\n    if (!useMethod)\n        throw new Error('No useable methode found:' + JSON.stringify(METHODS.map(m => m.type)));\n    else\n        return useMethod;\n}\n"],"names":["chooseMethod","METHODS","NativeMethod","IndexeDbMethod","LocalstorageMethod","isNode","NodeMethod","require","canBeUsed","push","options","chooseMethods","concat","methods","filter","Boolean","type","SimulateMethod","ret","find","m","Error","webWorkerSupport","useMethod","method","JSON","stringify","map"],"mappings":";QA4CgBA,YAAY,GAAZA,YAAY;AA5CH,GAAqB,CAArB,SAAqB;AACnB,GAAyB,CAAzB,YAAyB;AACrB,GAA2B,CAA3B,eAA2B;AAC/B,GAAuB,CAAvB,WAAuB;AAI3C,GAAQ,CAAR,KAAQ;AAEf,EAAqB,AAArB,mBAAqB;AACrB,KAAK,CAACC,OAAO,GAAG,CAAC;IACbC,SAAY;IACZC,YAAc;IACdC,eAAkB;AACtB,CAAC;AAED,EAGG,AAHH;;;CAGG,AAHH,EAGG,CACH,EAAE,EAAEC,KAAM,SAAE,CAAC;IAET,EAGG,AAHH;;;KAGG,AAHH,EAGG,CACH,KAAK,CAACC,UAAU,GAAGC,OAAO,CACtB,CAAoB,sBACpB,EAA8C,AAA9C,4CAA8C;IAC9C,EAA2C,AAA3C,yCAA2C;IAC3C,EAAiB,AAAjB,eAAiB;IACjB,CAAS;IAGb,EAGG,AAHH;;;KAGG,AAHH,EAGG,CACH,EAAE,EAAE,MAAM,CAACD,UAAU,CAACE,SAAS,KAAK,CAAU,WAAE,CAAC;QAC7CP,OAAO,CAACQ,IAAI,CAACH,UAAU;IAC3B,CAAC;AACL,CAAC;SAGeN,YAAY,CAACU,OAAO,EAAE,CAAC;IACnC,GAAG,CAACC,aAAa,GAAG,CAAC,CAAC,CAACC,MAAM,CAACF,OAAO,CAACG,OAAO,EAAEZ,OAAO,EAAEa,MAAM,CAACC,OAAO;IAEtE,EAAkB,AAAlB,gBAAkB;IAClB,EAAE,EAAEL,OAAO,CAACM,IAAI,EAAE,CAAC;QACf,EAAE,EAAEN,OAAO,CAACM,IAAI,KAAK,CAAU,WAAE,CAAC;YAC9B,EAA8C,AAA9C,4CAA8C;YAC9C,MAAM,CAACC,WAAc;QACzB,CAAC;QACD,KAAK,CAACC,GAAG,GAAGP,aAAa,CAACQ,IAAI,EAACC,CAAC,GAAIA,CAAC,CAACJ,IAAI,KAAKN,OAAO,CAACM,IAAI;;QAC3D,EAAE,GAAGE,GAAG,EAAE,KAAK,CAAC,GAAG,CAACG,KAAK,CAAC,CAAc,gBAAGX,OAAO,CAACM,IAAI,GAAG,CAAY;aACjE,MAAM,CAACE,GAAG;IACnB,CAAC;IAED,EAGG,AAHH;;;KAGG,AAHH,EAGG,CACH,EAAE,GAAGR,OAAO,CAACY,gBAAgB,KAAKjB,KAAM,SAAE,CAAC;QACvCM,aAAa,GAAGA,aAAa,CAACG,MAAM,EAACM,CAAC,GAAIA,CAAC,CAACJ,IAAI,KAAK,CAAK;;IAC9D,CAAC;IAED,KAAK,CAACO,SAAS,GAAGZ,aAAa,CAACQ,IAAI,EAACK,MAAM,GAAIA,MAAM,CAAChB,SAAS;;IAC/D,EAAE,GAAGe,SAAS,EACV,KAAK,CAAC,GAAG,CAACF,KAAK,CAAC,CAA2B,6BAAGI,IAAI,CAACC,SAAS,CAACzB,OAAO,CAAC0B,GAAG,EAACP,CAAC,GAAIA,CAAC,CAACJ,IAAI;;SAEpF,MAAM,CAACO,SAAS;AACxB,CAAC"}