{"version":3,"sources":["../../../../../../../libs/movie/data-access/node_modules/broadcast-channel/src/broadcast-channel.js"],"sourcesContent":["import {\n    isPromise\n} from './util.js';\n\nimport {\n    chooseMethod\n} from './method-chooser.js';\n\nimport {\n    fillOptionsWithDefaults\n} from './options.js';\n\n\nexport const BroadcastChannel = function (name, options) {\n    this.name = name;\n\n    if (ENFORCED_OPTIONS) {\n        options = ENFORCED_OPTIONS;\n    }\n    this.options = fillOptionsWithDefaults(options);\n\n    this.method = chooseMethod(this.options);\n\n    // isListening\n    this._iL = false;\n\n    /**\n     * _onMessageListener\n     * setting onmessage twice,\n     * will overwrite the first listener\n     */\n    this._onML = null;\n\n    /**\n     * _addEventListeners\n     */\n    this._addEL = {\n        message: [],\n        internal: []\n    };\n\n    /**\n     * Unsend message promises\n     * where the sending is still in progress\n     * @type {Set<Promise>}\n     */\n    this._uMP = new Set();\n\n    /**\n     * _beforeClose\n     * array of promises that will be awaited\n     * before the channel is closed\n     */\n    this._befC = [];\n\n    /**\n     * _preparePromise\n     */\n    this._prepP = null;\n    _prepareChannel(this);\n};\n\n// STATICS\n\n/**\n * used to identify if someone overwrites\n * window.BroadcastChannel with this\n * See methods/native.js\n */\nBroadcastChannel._pubkey = true;\n\n/**\n * clears the tmp-folder if is node\n * @return {Promise<boolean>} true if has run, false if not node\n */\nexport function clearNodeFolder(options) {\n    options = fillOptionsWithDefaults(options);\n    const method = chooseMethod(options);\n    if (method.type === 'node') {\n        return method.clearNodeFolder().then(() => true);\n    } else {\n        return Promise.resolve(false);\n    }\n}\n\n/**\n * if set, this method is enforced,\n * no mather what the options are\n */\nlet ENFORCED_OPTIONS;\nexport function enforceOptions(options) {\n    ENFORCED_OPTIONS = options;\n}\n\n\n// PROTOTYPE\nBroadcastChannel.prototype = {\n    postMessage(msg) {\n        if (this.closed) {\n            throw new Error(\n                'BroadcastChannel.postMessage(): ' +\n                'Cannot post message after channel has closed'\n            );\n        }\n        return _post(this, 'message', msg);\n    },\n    postInternal(msg) {\n        return _post(this, 'internal', msg);\n    },\n    set onmessage(fn) {\n        const time = this.method.microSeconds();\n        const listenObj = {\n            time,\n            fn\n        };\n        _removeListenerObject(this, 'message', this._onML);\n        if (fn && typeof fn === 'function') {\n            this._onML = listenObj;\n            _addListenerObject(this, 'message', listenObj);\n        } else {\n            this._onML = null;\n        }\n    },\n\n    addEventListener(type, fn) {\n        const time = this.method.microSeconds();\n        const listenObj = {\n            time,\n            fn\n        };\n        _addListenerObject(this, type, listenObj);\n    },\n    removeEventListener(type, fn) {\n        const obj = this._addEL[type].find(obj => obj.fn === fn);\n        _removeListenerObject(this, type, obj);\n    },\n\n    close() {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        const awaitPrepare = this._prepP ? this._prepP : Promise.resolve();\n\n        this._onML = null;\n        this._addEL.message = [];\n\n        return awaitPrepare\n            // wait until all current sending are processed\n            .then(() => Promise.all(Array.from(this._uMP)))\n            // run before-close hooks\n            .then(() => Promise.all(this._befC.map(fn => fn())))\n            // close the channel\n            .then(() => this.method.close(this._state));\n    },\n    get type() {\n        return this.method.type;\n    },\n    get isClosed() {\n        return this.closed;\n    }\n};\n\n\n/**\n * Post a message over the channel\n * @returns {Promise} that resolved when the message sending is done\n */\nfunction _post(broadcastChannel, type, msg) {\n    const time = broadcastChannel.method.microSeconds();\n    const msgObj = {\n        time,\n        type,\n        data: msg\n    };\n\n    const awaitPrepare = broadcastChannel._prepP ? broadcastChannel._prepP : Promise.resolve();\n    return awaitPrepare.then(() => {\n\n        const sendPromise = broadcastChannel.method.postMessage(\n            broadcastChannel._state,\n            msgObj\n        );\n\n        // add/remove to unsend messages list\n        broadcastChannel._uMP.add(sendPromise);\n        sendPromise\n        .catch()\n        .then(() => broadcastChannel._uMP.delete(sendPromise));\n\n        return sendPromise;\n    });\n}\n\nfunction _prepareChannel(channel) {\n    const maybePromise = channel.method.create(channel.name, channel.options);\n    if (isPromise(maybePromise)) {\n        channel._prepP = maybePromise;\n        maybePromise.then(s => {\n            // used in tests to simulate slow runtime\n            /*if (channel.options.prepareDelay) {\n                 await new Promise(res => setTimeout(res, this.options.prepareDelay));\n            }*/\n            channel._state = s;\n        });\n    } else {\n        channel._state = maybePromise;\n    }\n}\n\n\nfunction _hasMessageListeners(channel) {\n    if (channel._addEL.message.length > 0) return true;\n    if (channel._addEL.internal.length > 0) return true;\n    return false;\n}\n\nfunction _addListenerObject(channel, type, obj) {\n    channel._addEL[type].push(obj);\n    _startListening(channel);\n}\n\nfunction _removeListenerObject(channel, type, obj) {\n    channel._addEL[type] = channel._addEL[type].filter(o => o !== obj);\n    _stopListening(channel);\n}\n\nfunction _startListening(channel) {\n    if (!channel._iL && _hasMessageListeners(channel)) {\n        // someone is listening, start subscribing\n\n        const listenerFn = msgObj => {\n            channel._addEL[msgObj.type].forEach(obj => {\n                if (msgObj.time >= obj.time) {\n                    obj.fn(msgObj.data);\n                }\n            });\n        };\n\n        const time = channel.method.microSeconds();\n        if (channel._prepP) {\n            channel._prepP.then(() => {\n                channel._iL = true;\n                channel.method.onMessage(\n                    channel._state,\n                    listenerFn,\n                    time\n                );\n            });\n        } else {\n            channel._iL = true;\n            channel.method.onMessage(\n                channel._state,\n                listenerFn,\n                time\n            );\n        }\n    }\n}\n\nfunction _stopListening(channel) {\n    if (channel._iL && !_hasMessageListeners(channel)) {\n        // noone is listening, stop subscribing\n        channel._iL = false;\n        const time = channel.method.microSeconds();\n        channel.method.onMessage(\n            channel._state,\n            null,\n            time\n        );\n    }\n}\n"],"names":["clearNodeFolder","enforceOptions","BroadcastChannel","name","options","ENFORCED_OPTIONS","fillOptionsWithDefaults","method","chooseMethod","_iL","_onML","_addEL","message","internal","_uMP","Set","_befC","_prepP","_prepareChannel","_pubkey","type","then","Promise","resolve","prototype","postMessage","msg","closed","Error","_post","postInternal","onmessage","fn","time","microSeconds","listenObj","_removeListenerObject","_addListenerObject","addEventListener","removeEventListener","obj","find","close","awaitPrepare","all","Array","from","map","_state","isClosed","broadcastChannel","msgObj","data","sendPromise","add","catch","delete","channel","maybePromise","create","isPromise","s","_hasMessageListeners","length","push","_startListening","filter","o","_stopListening","listenerFn","forEach","onMessage"],"mappings":"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"}