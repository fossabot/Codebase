{"version":3,"sources":["../../../../../../../../libs/movie/data-access/node_modules/broadcast-channel/src/methods/native.js"],"sourcesContent":["import {\n    microSeconds as micro,\n    isNode\n} from '../util';\n\nexport const microSeconds = micro;\n\nexport const type = 'native';\n\nexport function create(channelName) {\n    const state = {\n        messagesCallback: null,\n        bc: new BroadcastChannel(channelName),\n        subFns: [] // subscriberFunctions\n    };\n\n    state.bc.onmessage = msg => {\n        if (state.messagesCallback) {\n            state.messagesCallback(msg.data);\n        }\n    };\n\n    return state;\n}\n\nexport function close(channelState) {\n    channelState.bc.close();\n    channelState.subFns = [];\n}\n\nexport function postMessage(channelState, messageJson) {\n    try {\n        channelState.bc.postMessage(messageJson, false);\n        return Promise.resolve();\n    } catch (err) {\n        return Promise.reject(err);\n    }\n}\n\nexport function onMessage(channelState, fn) {\n    channelState.messagesCallback = fn;\n}\n\nexport function canBeUsed() {\n\n    /**\n     * in the electron-renderer, isNode will be true even if we are in browser-context\n     * so we also check if window is undefined\n     */\n    if (isNode && typeof window === 'undefined') return false;\n\n    if (typeof BroadcastChannel === 'function') {\n        if (BroadcastChannel._pubkey) {\n            throw new Error(\n                'BroadcastChannel: Do not overwrite window.BroadcastChannel with this module, this is not a polyfill'\n            );\n        }\n        return true;\n    } else return false;\n}\n\n\nexport function averageResponseTime() {\n    return 150;\n}\n\nexport default {\n    create,\n    close,\n    onMessage,\n    postMessage,\n    canBeUsed,\n    type,\n    averageResponseTime,\n    microSeconds\n};\n"],"names":["create","close","postMessage","onMessage","canBeUsed","averageResponseTime","microSeconds","micro","type","channelName","state","messagesCallback","bc","BroadcastChannel","subFns","onmessage","msg","data","channelState","messageJson","Promise","resolve","err","reject","fn","isNode","window","_pubkey","Error"],"mappings":";QASgBA,MAAM,GAANA,MAAM;QAgBNC,KAAK,GAALA,KAAK;QAKLC,WAAW,GAAXA,WAAW;QASXC,SAAS,GAATA,SAAS;QAITC,SAAS,GAATA,SAAS;QAmBTC,mBAAmB,GAAnBA,mBAAmB;;AA3D5B,GAAS,CAAT,KAAS;AAET,KAAK,CAACC,YAAY,GAAGC,KAAK;QAApBD,YAAY,GAAZA,YAAY;AAElB,KAAK,CAACE,IAAI,GAAG,CAAQ;QAAfA,IAAI,GAAJA,IAAI;SAEDR,MAAM,CAACS,WAAW,EAAE,CAAC;IACjC,KAAK,CAACC,KAAK,GAAG,CAAC;QACXC,gBAAgB,EAAE,IAAI;QACtBC,EAAE,EAAE,GAAG,CAACC,gBAAgB,CAACJ,WAAW;QACpCK,MAAM,EAAE,CAAC,CAAC,AAAC,CAAsB,AAAtB,EAAsB,AAAtB,oBAAsB;IACrC,CAAC;IAEDJ,KAAK,CAACE,EAAE,CAACG,SAAS,IAAGC,GAAG,GAAI,CAAC;QACzB,EAAE,EAAEN,KAAK,CAACC,gBAAgB,EAAE,CAAC;YACzBD,KAAK,CAACC,gBAAgB,CAACK,GAAG,CAACC,IAAI;QACnC,CAAC;IACL,CAAC;IAED,MAAM,CAACP,KAAK;AAChB,CAAC;SAEeT,KAAK,CAACiB,YAAY,EAAE,CAAC;IACjCA,YAAY,CAACN,EAAE,CAACX,KAAK;IACrBiB,YAAY,CAACJ,MAAM,GAAG,CAAC,CAAC;AAC5B,CAAC;SAEeZ,WAAW,CAACgB,YAAY,EAAEC,WAAW,EAAE,CAAC;IACpD,GAAG,CAAC,CAAC;QACDD,YAAY,CAACN,EAAE,CAACV,WAAW,CAACiB,WAAW,EAAE,KAAK;QAC9C,MAAM,CAACC,OAAO,CAACC,OAAO;IAC1B,CAAC,CAAC,KAAK,EAAEC,GAAG,EAAE,CAAC;QACX,MAAM,CAACF,OAAO,CAACG,MAAM,CAACD,GAAG;IAC7B,CAAC;AACL,CAAC;SAEenB,SAAS,CAACe,YAAY,EAAEM,EAAE,EAAE,CAAC;IACzCN,YAAY,CAACP,gBAAgB,GAAGa,EAAE;AACtC,CAAC;SAEepB,SAAS,GAAG,CAAC;IAEzB,EAGG,AAHH;;;KAGG,AAHH,EAGG,CACH,EAAE,EAAEqB,KAAM,WAAI,MAAM,CAACC,MAAM,KAAK,CAAW,YAAE,MAAM,CAAC,KAAK;IAEzD,EAAE,EAAE,MAAM,CAACb,gBAAgB,KAAK,CAAU,WAAE,CAAC;QACzC,EAAE,EAAEA,gBAAgB,CAACc,OAAO,EAAE,CAAC;YAC3B,KAAK,CAAC,GAAG,CAACC,KAAK,CACX,CAAqG;QAE7G,CAAC;QACD,MAAM,CAAC,IAAI;IACf,CAAC,MAAM,MAAM,CAAC,KAAK;AACvB,CAAC;SAGevB,mBAAmB,GAAG,CAAC;IACnC,MAAM,CAAC,GAAG;AACd,CAAC;eAEc,CAAC;IACZL,MAAM;IACNC,KAAK;IACLE,SAAS;IACTD,WAAW;IACXE,SAAS;IACTI,IAAI;IACJH,mBAAmB;IACnBC,YAAY;AAChB,CAAC"}