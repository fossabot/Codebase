{"version":3,"sources":["../../../../../../../../libs/movie/data-access/node_modules/broadcast-channel/src/methods/node.js"],"sourcesContent":["/**\n * this method is used in nodejs-environments.\n * The ipc is handled via sockets and file-writes to the tmp-folder\n */\n\nconst util = require('util');\nconst fs = require('fs');\nconst os = require('os');\nconst events = require('events');\nconst net = require('net');\nconst path = require('path');\nconst micro = require('nano-time');\nconst rimraf = require('rimraf');\nconst sha3_224 = require('js-sha3').sha3_224;\nconst isNode = require('detect-node');\nconst unload = require('unload');\n\nconst fillOptionsWithDefaults = require('../../dist/lib/options.js').fillOptionsWithDefaults;\nconst ownUtil = require('../../dist/lib/util.js');\nconst randomInt = ownUtil.randomInt;\nconst randomToken = ownUtil.randomToken;\nconst { ObliviousSet } = require('oblivious-set');\n\n/**\n * windows sucks, so we have handle windows-type of socket-paths\n * @link https://gist.github.com/domenic/2790533#gistcomment-331356\n */\nfunction cleanPipeName(str) {\n    if (\n        process.platform === 'win32' &&\n        !str.startsWith('\\\\\\\\.\\\\pipe\\\\')\n    ) {\n        str = str.replace(/^\\//, '');\n        str = str.replace(/\\//g, '-');\n        return '\\\\\\\\.\\\\pipe\\\\' + str;\n    } else {\n        return str;\n    }\n}\n\nconst mkdir = util.promisify(fs.mkdir);\nconst writeFile = util.promisify(fs.writeFile);\nconst readFile = util.promisify(fs.readFile);\nconst unlink = util.promisify(fs.unlink);\nconst readdir = util.promisify(fs.readdir);\nconst chmod = util.promisify(fs.chmod);\nconst removeDir = util.promisify(rimraf);\n\nconst OTHER_INSTANCES = {};\nconst TMP_FOLDER_NAME = 'pubkey.bc';\nconst TMP_FOLDER_BASE = path.join(\n    os.tmpdir(),\n    TMP_FOLDER_NAME\n);\nconst getPathsCache = new Map();\n\nfunction getPaths(channelName) {\n    if (!getPathsCache.has(channelName)) {\n        const channelHash = sha3_224(channelName); // use hash incase of strange characters\n        /**\n         * because the lenght of socket-paths is limited, we use only the first 20 chars\n         * and also start with A to ensure we do not start with a number\n         * @link https://serverfault.com/questions/641347/check-if-a-path-exceeds-maximum-for-unix-domain-socket\n         */\n        const channelFolder = 'A' + channelHash.substring(0, 20);\n\n        const channelPathBase = path.join(\n            TMP_FOLDER_BASE,\n            channelFolder\n        );\n        const folderPathReaders = path.join(\n            channelPathBase,\n            'rdrs'\n        );\n        const folderPathMessages = path.join(\n            channelPathBase,\n            'messages'\n        );\n\n        const ret = {\n            channelBase: channelPathBase,\n            readers: folderPathReaders,\n            messages: folderPathMessages\n        };\n        getPathsCache.set(channelName, ret);\n        return ret;\n    }\n    return getPathsCache.get(channelName);\n}\n\nlet ENSURE_BASE_FOLDER_EXISTS_PROMISE = null;\nasync function ensureBaseFolderExists() {\n    if (!ENSURE_BASE_FOLDER_EXISTS_PROMISE) {\n        ENSURE_BASE_FOLDER_EXISTS_PROMISE = mkdir(TMP_FOLDER_BASE).catch(() => null);\n    }\n    return ENSURE_BASE_FOLDER_EXISTS_PROMISE;\n}\n\nasync function ensureFoldersExist(channelName, paths) {\n    paths = paths || getPaths(channelName);\n\n    await ensureBaseFolderExists();\n\n    await mkdir(paths.channelBase).catch(() => null);\n    await Promise.all([\n        mkdir(paths.readers).catch(() => null),\n        mkdir(paths.messages).catch(() => null)\n    ]);\n\n    // set permissions so other users can use the same channel\n    const chmodValue = '777';\n    await Promise.all([\n        chmod(paths.channelBase, chmodValue),\n        chmod(paths.readers, chmodValue),\n        chmod(paths.messages, chmodValue)\n    ]).catch(() => null);\n}\n\n/**\n * removes the tmp-folder\n * @return {Promise<true>}\n */\nasync function clearNodeFolder() {\n    if (!TMP_FOLDER_BASE || TMP_FOLDER_BASE === '' || TMP_FOLDER_BASE === '/') {\n        throw new Error('BroadcastChannel.clearNodeFolder(): path is wrong');\n    }\n    ENSURE_BASE_FOLDER_EXISTS_PROMISE = null;\n    await removeDir(TMP_FOLDER_BASE);\n    ENSURE_BASE_FOLDER_EXISTS_PROMISE = null;\n    return true;\n}\n\n\nfunction socketPath(channelName, readerUuid, paths) {\n    paths = paths || getPaths(channelName);\n    const socketPath = path.join(\n        paths.readers,\n        readerUuid + '.s'\n    );\n    return cleanPipeName(socketPath);\n}\n\nfunction socketInfoPath(channelName, readerUuid, paths) {\n    paths = paths || getPaths(channelName);\n    const socketPath = path.join(\n        paths.readers,\n        readerUuid + '.json'\n    );\n    return socketPath;\n}\n\n\n/**\n * Because it is not possible to get all socket-files in a folder,\n * when used under fucking windows,\n * we have to set a normal file so other readers know our socket exists\n */\nfunction createSocketInfoFile(channelName, readerUuid, paths) {\n    const pathToFile = socketInfoPath(channelName, readerUuid, paths);\n    return writeFile(\n        pathToFile,\n        JSON.stringify({\n            time: microSeconds()\n        })\n    ).then(() => pathToFile);\n}\n\n/**\n * returns the amount of channel-folders in the tmp-directory\n * @return {Promise<number>}\n */\nasync function countChannelFolders() {\n    await ensureBaseFolderExists();\n    const folders = await readdir(TMP_FOLDER_BASE);\n    return folders.length;\n}\n\n\nasync function connectionError(originalError) {\n    const count = await countChannelFolders();\n\n    // we only show the augmented message if there are more then 30 channels\n    // because we then assume that BroadcastChannel is used in unit-tests\n    if (count < 30) return originalError;\n\n    const addObj = {};\n    Object.entries(originalError).forEach(([k, v]) => addObj[k] = v);\n    const text = 'BroadcastChannel.create(): error: ' +\n        'This might happen if you have created to many channels, ' +\n        'like when you use BroadcastChannel in unit-tests.' +\n        'Try using BroadcastChannel.clearNodeFolder() to clear the tmp-folder before each test.' +\n        'See https://github.com/pubkey/broadcast-channel#clear-tmp-folder';\n    const newError = new Error(text + ': ' + JSON.stringify(addObj, null, 2));\n    return newError;\n}\n\n/**\n * creates the socket-file and subscribes to it\n * @return {{emitter: EventEmitter, server: any}}\n */\nasync function createSocketEventEmitter(channelName, readerUuid, paths) {\n    const pathToSocket = socketPath(channelName, readerUuid, paths);\n\n    const emitter = new events.EventEmitter();\n    const server = net\n        .createServer(stream => {\n            stream.on('end', function () { });\n            stream.on('data', function (msg) {\n                emitter.emit('data', msg.toString());\n            });\n        });\n\n    await new Promise((resolve, reject) => {\n        server.on('error', async (err) => {\n            const useErr = await connectionError(err);\n            reject(useErr);\n        });\n\n        server.listen(pathToSocket, async (err, res) => {\n            if (err) {\n                const useErr = await connectionError(err);\n                reject(useErr);\n            } else resolve(res);\n        });\n    });\n\n    return {\n        path: pathToSocket,\n        emitter,\n        server\n    };\n}\n\nasync function openClientConnection(channelName, readerUuid) {\n    const pathToSocket = socketPath(channelName, readerUuid);\n    const client = new net.Socket();\n    return new Promise((res, rej) => {\n        client.connect(\n            pathToSocket,\n            () => res(client)\n        );\n        client.on('error', err => rej(err));\n    });\n}\n\n\n/**\n * writes the new message to the file-system\n * so other readers can find it\n * @return {Promise}\n */\nfunction writeMessage(channelName, readerUuid, messageJson, paths) {\n    paths = paths || getPaths(channelName);\n    const time = microSeconds();\n    const writeObject = {\n        uuid: readerUuid,\n        time,\n        data: messageJson\n    };\n\n    const token = randomToken();\n    const fileName = time + '_' + readerUuid + '_' + token + '.json';\n\n    const msgPath = path.join(\n        paths.messages,\n        fileName\n    );\n\n    return writeFile(\n        msgPath,\n        JSON.stringify(writeObject)\n    ).then(() => {\n        return {\n            time,\n            uuid: readerUuid,\n            token,\n            path: msgPath\n        };\n    });\n}\n\n/**\n * returns the uuids of all readers\n * @return {string[]}\n */\nasync function getReadersUuids(channelName, paths) {\n    paths = paths || getPaths(channelName);\n    const readersPath = paths.readers;\n    const files = await readdir(readersPath);\n\n    return files\n        .map(file => file.split('.'))\n        .filter(split => split[1] === 'json') // do not scan .socket-files\n        .map(split => split[0]);\n}\n\nasync function messagePath(channelName, time, token, writerUuid) {\n    const fileName = time + '_' + writerUuid + '_' + token + '.json';\n\n    const msgPath = path.join(\n        getPaths(channelName).messages,\n        fileName\n    );\n    return msgPath;\n}\n\nasync function getAllMessages(channelName, paths) {\n    paths = paths || getPaths(channelName);\n    const messagesPath = paths.messages;\n    const files = await readdir(messagesPath);\n    return files.map(file => {\n        const fileName = file.split('.')[0];\n        const split = fileName.split('_');\n\n        return {\n            path: path.join(\n                messagesPath,\n                file\n            ),\n            time: parseInt(split[0]),\n            senderUuid: split[1],\n            token: split[2]\n        };\n    });\n}\n\nfunction getSingleMessage(channelName, msgObj, paths) {\n    paths = paths || getPaths(channelName);\n\n    return {\n        path: path.join(\n            paths.messages,\n            msgObj.t + '_' + msgObj.u + '_' + msgObj.to + '.json'\n        ),\n        time: msgObj.t,\n        senderUuid: msgObj.u,\n        token: msgObj.to\n    };\n}\n\n\nfunction readMessage(messageObj) {\n    return readFile(messageObj.path, 'utf8')\n        .then(content => JSON.parse(content));\n}\n\nasync function cleanOldMessages(messageObjects, ttl) {\n    const olderThen = Date.now() - ttl;\n    await Promise.all(\n        messageObjects\n            .filter(obj => (obj.time / 1000) < olderThen)\n            .map(obj => unlink(obj.path).catch(() => null))\n    );\n}\n\n\n\nconst type = 'node';\n\n/**\n * creates a new channelState\n * @return {Promise<any>}\n */\nasync function create(channelName, options = {}) {\n    options = fillOptionsWithDefaults(options);\n    const time = microSeconds();\n    const paths = getPaths(channelName);\n    const ensureFolderExistsPromise = ensureFoldersExist(channelName, paths);\n    const uuid = randomToken();\n\n    const state = {\n        time,\n        channelName,\n        options,\n        uuid,\n        paths,\n        // contains all messages that have been emitted before\n        emittedMessagesIds: new ObliviousSet(options.node.ttl * 2),\n        messagesCallbackTime: null,\n        messagesCallback: null,\n        // ensures we do not read messages in parrallel\n        writeBlockPromise: Promise.resolve(),\n        otherReaderClients: {},\n        // ensure if process crashes, everything is cleaned up\n        removeUnload: unload.add(() => close(state)),\n        closed: false\n    };\n\n    if (!OTHER_INSTANCES[channelName]) OTHER_INSTANCES[channelName] = [];\n    OTHER_INSTANCES[channelName].push(state);\n\n    await ensureFolderExistsPromise;\n    const [\n        socketEE,\n        infoFilePath\n    ] = await Promise.all([\n        createSocketEventEmitter(channelName, uuid, paths),\n        createSocketInfoFile(channelName, uuid, paths),\n        refreshReaderClients(state)\n    ]);\n    state.socketEE = socketEE;\n    state.infoFilePath = infoFilePath;\n\n    // when new message comes in, we read it and emit it\n    socketEE.emitter.on('data', data => {\n\n        // if the socket is used fast, it may appear that multiple messages are flushed at once\n        // so we have to split them before\n        const singleOnes = data.split('|');\n        singleOnes\n            .filter(single => single !== '')\n            .forEach(single => {\n                try {\n                    const obj = JSON.parse(single);\n                    handleMessagePing(state, obj);\n                } catch (err) {\n                    throw new Error('could not parse data: ' + single);\n                }\n            });\n    });\n\n    return state;\n}\n\nfunction _filterMessage(msgObj, state) {\n    if (msgObj.senderUuid === state.uuid) return false; // not send by own\n    if (state.emittedMessagesIds.has(msgObj.token)) return false; // not already emitted\n    if (!state.messagesCallback) return false; // no listener\n    if (msgObj.time < state.messagesCallbackTime) return false; // not older then onMessageCallback\n    if (msgObj.time < state.time) return false; // msgObj is older then channel\n\n    state.emittedMessagesIds.add(msgObj.token);\n    return true;\n}\n\n/**\n * when the socket pings, so that we now new messages came,\n * run this\n */\nasync function handleMessagePing(state, msgObj) {\n\n    /**\n     * when there are no listener, we do nothing\n     */\n    if (!state.messagesCallback) return;\n\n    let messages;\n    if (!msgObj) {\n        // get all\n        messages = await getAllMessages(state.channelName, state.paths);\n    } else {\n        // get single message\n        messages = [\n            getSingleMessage(state.channelName, msgObj, state.paths)\n        ];\n    }\n\n    const useMessages = messages\n        .filter(msgObj => _filterMessage(msgObj, state))\n        .sort((msgObjA, msgObjB) => msgObjA.time - msgObjB.time); // sort by time\n\n\n    // if no listener or message, so not do anything\n    if (!useMessages.length || !state.messagesCallback) return;\n\n    // read contents\n    await Promise.all(\n        useMessages\n            .map(\n                msgObj => readMessage(msgObj).then(content => msgObj.content = content)\n            )\n    );\n\n    useMessages.forEach(msgObj => {\n        state.emittedMessagesIds.add(msgObj.token);\n\n        if (state.messagesCallback) {\n            // emit to subscribers\n            state.messagesCallback(msgObj.content.data);\n        }\n    });\n}\n\n/**\n * ensures that the channelState is connected with all other readers\n * @return {Promise<void>}\n */\nfunction refreshReaderClients(channelState) {\n    return getReadersUuids(channelState.channelName, channelState.paths)\n        .then(otherReaders => {\n            // remove subscriptions to closed readers\n            Object.keys(channelState.otherReaderClients)\n                .filter(readerUuid => !otherReaders.includes(readerUuid))\n                .forEach(async (readerUuid) => {\n                    try {\n                        await channelState.otherReaderClients[readerUuid].destroy();\n                    } catch (err) { }\n                    delete channelState.otherReaderClients[readerUuid];\n                });\n\n            // add new readers\n            return Promise.all(\n                otherReaders\n                    .filter(readerUuid => readerUuid !== channelState.uuid) // not own\n                    .filter(readerUuid => !channelState.otherReaderClients[readerUuid]) // not already has client\n                    .map(async (readerUuid) => {\n                        try {\n                            if (channelState.closed) return;\n                            try {\n                                const client = await openClientConnection(channelState.channelName, readerUuid);\n                                channelState.otherReaderClients[readerUuid] = client;\n                            } catch (err) {\n                                // this can throw when the cleanup of another channel was interrupted\n                                // or the socket-file does not exits yet\n                            }\n                        } catch (err) {\n                            // this might throw if the other channel is closed at the same time when this one is running refresh\n                            // so we do not throw an error\n                        }\n                    })\n            );\n        });\n}\n\n/**\n * post a message to the other readers\n * @return {Promise<void>}\n */\nfunction postMessage(channelState, messageJson) {\n    const writePromise = writeMessage(\n        channelState.channelName,\n        channelState.uuid,\n        messageJson,\n        channelState.paths\n    );\n    channelState.writeBlockPromise = channelState.writeBlockPromise.then(async () => {\n\n        // w8 one tick to let the buffer flush\n        await new Promise(res => setTimeout(res, 0));\n\n        const [msgObj] = await Promise.all([\n            writePromise,\n            refreshReaderClients(channelState)\n        ]);\n        emitOverFastPath(channelState, msgObj, messageJson);\n        const pingStr = '{\"t\":' + msgObj.time + ',\"u\":\"' + msgObj.uuid + '\",\"to\":\"' + msgObj.token + '\"}|';\n\n        const writeToReadersPromise = Promise.all(\n            Object.values(channelState.otherReaderClients)\n                .filter(client => client.writable) // client might have closed in between\n                .map(client => {\n                    return new Promise(res => {\n                        client.write(pingStr, res);\n                    });\n                })\n        );\n\n        /**\n         * clean up old messages\n         * to not waste resources on cleaning up,\n         * only if random-int matches, we clean up old messages\n         */\n        if (randomInt(0, 20) === 0) {\n            /* await */\n            getAllMessages(channelState.channelName, channelState.paths)\n                .then(allMessages => cleanOldMessages(allMessages, channelState.options.node.ttl));\n        }\n\n        return writeToReadersPromise;\n    });\n\n    return channelState.writeBlockPromise;\n}\n\n/**\n * When multiple BroadcastChannels with the same name\n * are created in a single node-process, we can access them directly and emit messages.\n * This might not happen often in production\n * but will speed up things when this module is used in unit-tests.\n */\nfunction emitOverFastPath(state, msgObj, messageJson) {\n    if (!state.options.node.useFastPath) return; // disabled\n    const others = OTHER_INSTANCES[state.channelName].filter(s => s !== state);\n\n    const checkObj = {\n        time: msgObj.time,\n        senderUuid: msgObj.uuid,\n        token: msgObj.token\n    };\n\n    others\n        .filter(otherState => _filterMessage(checkObj, otherState))\n        .forEach(otherState => {\n            otherState.messagesCallback(messageJson);\n        });\n}\n\n\nfunction onMessage(channelState, fn, time = microSeconds()) {\n    channelState.messagesCallbackTime = time;\n    channelState.messagesCallback = fn;\n    handleMessagePing(channelState);\n}\n\n/**\n * closes the channel\n * @return {Promise}\n */\nfunction close(channelState) {\n    if (channelState.closed) return;\n    channelState.closed = true;\n    channelState.emittedMessagesIds.clear();\n    OTHER_INSTANCES[channelState.channelName] = OTHER_INSTANCES[channelState.channelName].filter(o => o !== channelState);\n\n    if (channelState.removeUnload) {\n        channelState.removeUnload.remove();\n    }\n\n    return new Promise((res) => {\n\n        if (channelState.socketEE)\n            channelState.socketEE.emitter.removeAllListeners();\n\n        Object.values(channelState.otherReaderClients)\n            .forEach(client => client.destroy());\n\n        if (channelState.infoFilePath) {\n            try {\n                fs.unlinkSync(channelState.infoFilePath);\n            } catch (err) { }\n        }\n\n        /**\n         * the server get closed lazy because others might still write on it\n         * and have not found out that the infoFile was deleted\n         */\n        setTimeout(() => {\n            channelState.socketEE.server.close();\n            res();\n        }, 200);\n    });\n}\n\n\nfunction canBeUsed() {\n    return isNode;\n}\n\n/**\n * on node we use a relatively height averageResponseTime,\n * because the file-io might be in use.\n * Also it is more important that the leader-election is reliable,\n * then to have a fast election.\n */\nfunction averageResponseTime() {\n    return 200;\n}\n\nfunction microSeconds() {\n    return parseInt(micro.microseconds());\n}\n\nmodule.exports = {\n    TMP_FOLDER_BASE,\n    cleanPipeName,\n    getPaths,\n    ensureFoldersExist,\n    clearNodeFolder,\n    socketPath,\n    socketInfoPath,\n    createSocketInfoFile,\n    countChannelFolders,\n    createSocketEventEmitter,\n    openClientConnection,\n    writeMessage,\n    getReadersUuids,\n    messagePath,\n    getAllMessages,\n    getSingleMessage,\n    readMessage,\n    cleanOldMessages,\n    type,\n    create,\n    _filterMessage,\n    handleMessagePing,\n    refreshReaderClients,\n    postMessage,\n    emitOverFastPath,\n    onMessage,\n    close,\n    canBeUsed,\n    averageResponseTime,\n    microSeconds\n};\n"],"names":["util","require","fs","os","events","net","path","micro","rimraf","sha3_224","isNode","unload","fillOptionsWithDefaults","ownUtil","randomInt","randomToken","ObliviousSet","cleanPipeName","str","process","platform","startsWith","replace","mkdir","promisify","writeFile","readFile","unlink","readdir","chmod","removeDir","OTHER_INSTANCES","TMP_FOLDER_NAME","TMP_FOLDER_BASE","join","tmpdir","getPathsCache","Map","getPaths","channelName","has","channelHash","channelFolder","substring","channelPathBase","folderPathReaders","folderPathMessages","ret","channelBase","readers","messages","set","get","ENSURE_BASE_FOLDER_EXISTS_PROMISE","ensureBaseFolderExists","catch","ensureFoldersExist","paths","Promise","all","chmodValue","clearNodeFolder","Error","socketPath","readerUuid","socketInfoPath","createSocketInfoFile","pathToFile","JSON","stringify","time","microSeconds","then","countChannelFolders","folders","length","connectionError","originalError","count","addObj","Object","entries","forEach","k","v","text","newError","createSocketEventEmitter","pathToSocket","emitter","EventEmitter","server","createServer","stream","on","msg","emit","toString","resolve","reject","err","useErr","listen","res","openClientConnection","client","Socket","rej","connect","writeMessage","messageJson","writeObject","uuid","data","token","fileName","msgPath","getReadersUuids","readersPath","files","map","file","split","filter","messagePath","writerUuid","getAllMessages","messagesPath","parseInt","senderUuid","getSingleMessage","msgObj","t","u","to","readMessage","messageObj","content","parse","cleanOldMessages","messageObjects","ttl","olderThen","Date","now","obj","type","create","options","ensureFolderExistsPromise","state","emittedMessagesIds","node","messagesCallbackTime","messagesCallback","writeBlockPromise","otherReaderClients","removeUnload","add","close","closed","push","socketEE","infoFilePath","refreshReaderClients","singleOnes","single","handleMessagePing","_filterMessage","useMessages","sort","msgObjA","msgObjB","channelState","otherReaders","keys","includes","destroy","postMessage","writePromise","setTimeout","emitOverFastPath","pingStr","writeToReadersPromise","values","writable","write","allMessages","useFastPath","others","s","checkObj","otherState","onMessage","fn","clear","o","remove","removeAllListeners","unlinkSync","canBeUsed","averageResponseTime","microseconds","module","exports"],"mappings":"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"}