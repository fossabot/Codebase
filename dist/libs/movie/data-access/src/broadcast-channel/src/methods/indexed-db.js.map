{"version":3,"sources":["../../../../../../../../libs/movie/data-access/node_modules/broadcast-channel/src/methods/indexed-db.js"],"sourcesContent":["/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n */\n\nimport {\n    sleep,\n    randomInt,\n    randomToken,\n    microSeconds as micro,\n    isNode\n} from '../util.js';\n\nexport const microSeconds = micro;\nimport { ObliviousSet } from 'oblivious-set';\n\nimport {\n    fillOptionsWithDefaults\n} from '../options';\n\nconst DB_PREFIX = 'pubkey.broadcast-channel-0-';\nconst OBJECT_STORE_ID = 'messages';\n\nexport const type = 'idb';\n\nexport function getIdb() {\n    if (typeof indexedDB !== 'undefined') return indexedDB;\n    if (typeof window !== 'undefined') {\n        if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\n        if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\n        if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\n    }\n\n    return false;\n}\n\nexport function createDatabase(channelName) {\n    const IndexedDB = getIdb();\n\n    // create table\n    const dbName = DB_PREFIX + channelName;\n    const openRequest = IndexedDB.open(dbName, 1);\n\n    openRequest.onupgradeneeded = ev => {\n        const db = ev.target.result;\n        db.createObjectStore(OBJECT_STORE_ID, {\n            keyPath: 'id',\n            autoIncrement: true\n        });\n    };\n    const dbPromise = new Promise((res, rej) => {\n        openRequest.onerror = ev => rej(ev);\n        openRequest.onsuccess = () => {\n            res(openRequest.result);\n        };\n    });\n\n    return dbPromise;\n}\n\n/**\n * writes the new message to the database\n * so other readers can find it\n */\nexport function writeMessage(db, readerUuid, messageJson) {\n    const time = new Date().getTime();\n    const writeObject = {\n        uuid: readerUuid,\n        time,\n        data: messageJson\n    };\n\n    const transaction = db.transaction([OBJECT_STORE_ID], 'readwrite');\n\n    return new Promise((res, rej) => {\n        transaction.oncomplete = () => res();\n        transaction.onerror = ev => rej(ev);\n\n        const objectStore = transaction.objectStore(OBJECT_STORE_ID);\n        objectStore.add(writeObject);\n    });\n}\n\nexport function getAllMessages(db) {\n    const objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n    const ret = [];\n    return new Promise(res => {\n        objectStore.openCursor().onsuccess = ev => {\n            const cursor = ev.target.result;\n            if (cursor) {\n                ret.push(cursor.value);\n                //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n                cursor.continue();\n            } else {\n                res(ret);\n            }\n        };\n    });\n}\n\nexport function getMessagesHigherThan(db, lastCursorId) {\n    const objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n    const ret = [];\n\n    function openCursor() {\n        // Occasionally Safari will fail on IDBKeyRange.bound, this\n        // catches that error, having it open the cursor to the first\n        // item. When it gets data it will advance to the desired key.\n        try {\n            const keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n            return objectStore.openCursor(keyRangeValue);\n        } catch (e) {\n            return objectStore.openCursor();\n        }\n    }\n\n    return new Promise(res => {\n        openCursor().onsuccess = ev => {\n            const cursor = ev.target.result;\n            if (cursor) {\n                if (cursor.value.id < lastCursorId + 1) {\n                    cursor.continue(lastCursorId + 1);\n                } else {\n                    ret.push(cursor.value);\n                    cursor.continue();\n                }\n            } else {\n                res(ret);\n            }\n        };\n    });\n}\n\nexport function removeMessageById(db, id) {\n    const request = db.transaction([OBJECT_STORE_ID], 'readwrite')\n        .objectStore(OBJECT_STORE_ID)\n        .delete(id);\n    return new Promise(res => {\n        request.onsuccess = () => res();\n    });\n}\n\nexport function getOldMessages(db, ttl) {\n    const olderThen = new Date().getTime() - ttl;\n    const objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n    const ret = [];\n    return new Promise(res => {\n        objectStore.openCursor().onsuccess = ev => {\n            const cursor = ev.target.result;\n            if (cursor) {\n                const msgObk = cursor.value;\n                if (msgObk.time < olderThen) {\n                    ret.push(msgObk);\n                    //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n                    cursor.continue();\n                } else {\n                    // no more old messages,\n                    res(ret);\n                    return;\n                }\n            } else {\n                res(ret);\n            }\n        };\n    });\n}\n\nexport function cleanOldMessages(db, ttl) {\n    return getOldMessages(db, ttl)\n        .then(tooOld => {\n            return Promise.all(\n                tooOld.map(msgObj => removeMessageById(db, msgObj.id))\n            );\n        });\n}\n\nexport function create(channelName, options) {\n    options = fillOptionsWithDefaults(options);\n\n    return createDatabase(channelName).then(db => {\n        const state = {\n            closed: false,\n            lastCursorId: 0,\n            channelName,\n            options,\n            uuid: randomToken(),\n            /**\n             * emittedMessagesIds\n             * contains all messages that have been emitted before\n             * @type {ObliviousSet}\n             */\n            eMIs: new ObliviousSet(options.idb.ttl * 2),\n            // ensures we do not read messages in parrallel\n            writeBlockPromise: Promise.resolve(),\n            messagesCallback: null,\n            readQueuePromises: [],\n            db\n        };\n\n        /**\n         * Handle abrupt closes that do not originate from db.close().\n         * This could happen, for example, if the underlying storage is\n         * removed or if the user clears the database in the browser's\n         * history preferences.\n         */\n        db.onclose = function () {\n            state.closed = true;\n\n            if (options.idb.onclose) options.idb.onclose();\n        };\n\n        /**\n         * if service-workers are used,\n         * we have no 'storage'-event if they post a message,\n         * therefore we also have to set an interval\n         */\n        _readLoop(state);\n\n        return state;\n    });\n}\n\nfunction _readLoop(state) {\n    if (state.closed) return;\n\n    readNewMessages(state)\n        .then(() => sleep(state.options.idb.fallbackInterval))\n        .then(() => _readLoop(state));\n}\n\n\nfunction _filterMessage(msgObj, state) {\n    if (msgObj.uuid === state.uuid) return false; // send by own\n    if (state.eMIs.has(msgObj.id)) return false; // already emitted\n    if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n    return true;\n}\n\n/**\n * reads all new messages from the database and emits them\n */\nfunction readNewMessages(state) {\n\n    // channel already closed\n    if (state.closed) return Promise.resolve();\n\n    // if no one is listening, we do not need to scan for new messages\n    if (!state.messagesCallback) return Promise.resolve();\n\n    return getMessagesHigherThan(state.db, state.lastCursorId)\n        .then(newerMessages => {\n            const useMessages = newerMessages\n                /**\n                 * there is a bug in iOS where the msgObj can be undefined some times\n                 * so we filter them out\n                 * @link https://github.com/pubkey/broadcast-channel/issues/19\n                 */\n                .filter(msgObj => !!msgObj)\n                .map(msgObj => {\n                    if (msgObj.id > state.lastCursorId) {\n                        state.lastCursorId = msgObj.id;\n                    }\n                    return msgObj;\n                })\n                .filter(msgObj => _filterMessage(msgObj, state))\n                .sort((msgObjA, msgObjB) => msgObjA.time - msgObjB.time); // sort by time\n            useMessages.forEach(msgObj => {\n                if (state.messagesCallback) {\n                    state.eMIs.add(msgObj.id);\n                    state.messagesCallback(msgObj.data);\n                }\n            });\n\n            return Promise.resolve();\n        });\n}\n\nexport function close(channelState) {\n    channelState.closed = true;\n    channelState.db.close();\n}\n\nexport function postMessage(channelState, messageJson) {\n\n    channelState.writeBlockPromise = channelState.writeBlockPromise\n        .then(() => writeMessage(\n            channelState.db,\n            channelState.uuid,\n            messageJson\n        ))\n        .then(() => {\n            if (randomInt(0, 10) === 0) {\n                /* await (do not await) */\n                cleanOldMessages(\n                    channelState.db,\n                    channelState.options.idb.ttl\n                );\n            }\n        });\n\n    return channelState.writeBlockPromise;\n}\n\nexport function onMessage(channelState, fn, time) {\n    channelState.messagesCallbackTime = time;\n    channelState.messagesCallback = fn;\n    readNewMessages(channelState);\n}\n\nexport function canBeUsed() {\n    if (isNode) return false;\n    const idb = getIdb();\n\n    if (!idb) return false;\n    return true;\n}\n\nexport function averageResponseTime(options) {\n    return options.idb.fallbackInterval * 2;\n}\n\nexport default {\n    create,\n    close,\n    onMessage,\n    postMessage,\n    canBeUsed,\n    type,\n    averageResponseTime,\n    microSeconds\n};\n"],"names":["getIdb","createDatabase","writeMessage","getAllMessages","getMessagesHigherThan","removeMessageById","getOldMessages","cleanOldMessages","create","close","postMessage","onMessage","canBeUsed","averageResponseTime","microSeconds","micro","DB_PREFIX","OBJECT_STORE_ID","type","indexedDB","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","channelName","IndexedDB","dbName","openRequest","open","onupgradeneeded","ev","db","target","result","createObjectStore","keyPath","autoIncrement","dbPromise","Promise","res","rej","onerror","onsuccess","readerUuid","messageJson","time","Date","getTime","writeObject","uuid","data","transaction","oncomplete","objectStore","add","ret","openCursor","cursor","push","value","continue","lastCursorId","keyRangeValue","IDBKeyRange","bound","Infinity","e","id","request","delete","ttl","olderThen","msgObk","then","tooOld","all","map","msgObj","options","fillOptionsWithDefaults","state","closed","randomToken","eMIs","ObliviousSet","idb","writeBlockPromise","resolve","messagesCallback","readQueuePromises","onclose","_readLoop","readNewMessages","sleep","fallbackInterval","_filterMessage","has","messagesCallbackTime","newerMessages","useMessages","filter","sort","msgObjA","msgObjB","forEach","channelState","randomInt","fn","isNode"],"mappings":"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"}