{"version":3,"sources":["../../../../../../../../libs/movie/data-access/node_modules/axios/lib/helpers/buildURL.js"],"sourcesContent":["'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n"],"names":["utils","require","encode","val","encodeURIComponent","replace","module","exports","buildURL","url","params","paramsSerializer","serializedParams","isURLSearchParams","toString","parts","forEach","serialize","key","isArray","parseValue","v","isDate","toISOString","isObject","JSON","stringify","push","join","hashmarkIndex","indexOf","slice"],"mappings":"AAAA,CAAY;AAEZ,GAAG,CAACA,KAAK,GAAGC,OAAO,CAAC,CAAY;SAEvBC,MAAM,CAACC,GAAG,EAAE,CAAC;IACpB,MAAM,CAACC,kBAAkB,CAACD,GAAG,EAC3BE,OAAO,UAAU,CAAG,IACpBA,OAAO,SAAS,CAAG,IACnBA,OAAO,UAAU,CAAG,IACpBA,OAAO,SAAS,CAAG,IACnBA,OAAO,UAAU,CAAG,IACpBA,OAAO,UAAU,CAAG;AACxB,CAAC;AAED,EAMG,AANH;;;;;;CAMG,AANH,EAMG,CACHC,MAAM,CAACC,OAAO,GAAG,QAAQ,CAACC,QAAQ,CAACC,GAAG,EAAEC,MAAM,EAAEC,gBAAgB,EAAE,CAAC;IACjE,EAA8B,AAA9B,0BAA8B,AAA9B,EAA8B,CAC9B,EAAE,GAAGD,MAAM,EAAE,CAAC;QACZ,MAAM,CAACD,GAAG;IACZ,CAAC;IAED,GAAG,CAACG,gBAAgB;IACpB,EAAE,EAAED,gBAAgB,EAAE,CAAC;QACrBC,gBAAgB,GAAGD,gBAAgB,CAACD,MAAM;IAC5C,CAAC,MAAM,EAAE,EAAEV,KAAK,CAACa,iBAAiB,CAACH,MAAM,GAAG,CAAC;QAC3CE,gBAAgB,GAAGF,MAAM,CAACI,QAAQ;IACpC,CAAC,MAAM,CAAC;QACN,GAAG,CAACC,KAAK,GAAG,CAAC,CAAC;QAEdf,KAAK,CAACgB,OAAO,CAACN,MAAM,EAAE,QAAQ,CAACO,SAAS,CAACd,GAAG,EAAEe,GAAG,EAAE,CAAC;YAClD,EAAE,EAAEf,GAAG,KAAK,IAAI,IAAI,MAAM,CAACA,GAAG,KAAK,CAAW,YAAE,CAAC;gBAC/C,MAAM;YACR,CAAC;YAED,EAAE,EAAEH,KAAK,CAACmB,OAAO,CAAChB,GAAG,GAAG,CAAC;gBACvBe,GAAG,GAAGA,GAAG,GAAG,CAAI;YAClB,CAAC,MAAM,CAAC;gBACNf,GAAG,GAAG,CAACA;oBAAAA,GAAG;gBAAA,CAAC;YACb,CAAC;YAEDH,KAAK,CAACgB,OAAO,CAACb,GAAG,EAAE,QAAQ,CAACiB,UAAU,CAACC,CAAC,EAAE,CAAC;gBACzC,EAAE,EAAErB,KAAK,CAACsB,MAAM,CAACD,CAAC,GAAG,CAAC;oBACpBA,CAAC,GAAGA,CAAC,CAACE,WAAW;gBACnB,CAAC,MAAM,EAAE,EAAEvB,KAAK,CAACwB,QAAQ,CAACH,CAAC,GAAG,CAAC;oBAC7BA,CAAC,GAAGI,IAAI,CAACC,SAAS,CAACL,CAAC;gBACtB,CAAC;gBACDN,KAAK,CAACY,IAAI,CAACzB,MAAM,CAACgB,GAAG,IAAI,CAAG,KAAGhB,MAAM,CAACmB,CAAC;YACzC,CAAC;QACH,CAAC;QAEDT,gBAAgB,GAAGG,KAAK,CAACa,IAAI,CAAC,CAAG;IACnC,CAAC;IAED,EAAE,EAAEhB,gBAAgB,EAAE,CAAC;QACrB,GAAG,CAACiB,aAAa,GAAGpB,GAAG,CAACqB,OAAO,CAAC,CAAG;QACnC,EAAE,EAAED,aAAa,MAAM,CAAC,EAAE,CAAC;YACzBpB,GAAG,GAAGA,GAAG,CAACsB,KAAK,CAAC,CAAC,EAAEF,aAAa;QAClC,CAAC;QAEDpB,GAAG,KAAKA,GAAG,CAACqB,OAAO,CAAC,CAAG,SAAO,CAAC,GAAG,CAAG,KAAG,CAAG,MAAIlB,gBAAgB;IACjE,CAAC;IAED,MAAM,CAACH,GAAG;AACZ,CAAC"}