{"version":3,"sources":["../../../../../../../../libs/movie/data-access/node_modules/uuid/dist/esm-browser/v35.js"],"sourcesContent":["import stringify from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    var bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (var i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return stringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}"],"names":["stringToBytes","str","unescape","encodeURIComponent","bytes","i","length","push","charCodeAt","DNS","URL","name","version","hashfunc","generateUUID","value","namespace","buf","offset","parse","TypeError","Uint8Array","set","stringify","err"],"mappings":";;;AAAsB,GAAgB,CAAhB,YAAgB;AACpB,GAAY,CAAZ,QAAY;SAErBA,aAAa,CAACC,GAAG,EAAE,CAAC;IAC3BA,GAAG,GAAGC,QAAQ,CAACC,kBAAkB,CAACF,GAAG,GAAI,CAAc,AAAd,EAAc,AAAd,YAAc;IAEvD,GAAG,CAACG,KAAK,GAAG,CAAC,CAAC;IAEd,GAAG,CAAE,GAAG,CAACC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,GAAG,CAACK,MAAM,IAAID,CAAC,CAAE,CAAC;QACpCD,KAAK,CAACG,IAAI,CAACN,GAAG,CAACO,UAAU,CAACH,CAAC;IAC7B,CAAC;IAED,MAAM,CAACD,KAAK;AACd,CAAC;AAEM,GAAG,CAACK,GAAG,GAAG,CAAsC;QAA5CA,GAAG,GAAHA,GAAG;AACP,GAAG,CAACC,GAAG,GAAG,CAAsC;QAA5CA,GAAG,GAAHA,GAAG;kBACWC,IAAI,EAAEC,OAAO,EAAEC,QAAQ,EAAE,CAAC;aACxCC,YAAY,CAACC,KAAK,EAAEC,SAAS,EAAEC,GAAG,EAAEC,MAAM,EAAE,CAAC;QACpD,EAAE,EAAE,MAAM,CAACH,KAAK,KAAK,CAAQ,SAAE,CAAC;YAC9BA,KAAK,GAAGf,aAAa,CAACe,KAAK;QAC7B,CAAC;QAED,EAAE,EAAE,MAAM,CAACC,SAAS,KAAK,CAAQ,SAAE,CAAC;YAClCA,SAAS,OAAGG,QAAK,UAACH,SAAS;QAC7B,CAAC;QAED,EAAE,EAAEA,SAAS,CAACV,MAAM,KAAK,EAAE,EAAE,CAAC;YAC5B,KAAK,CAACc,SAAS,CAAC,CAAkE;QACpF,CAAC,AAAC,CAA+C,AAA/C,EAA+C,AAA/C,6CAA+C;QACjD,EAA2E,AAA3E,yEAA2E;QAC3E,EAAuC,AAAvC,qCAAuC;QAGvC,GAAG,CAAChB,KAAK,GAAG,GAAG,CAACiB,UAAU,CAAC,EAAE,GAAGN,KAAK,CAACT,MAAM;QAC5CF,KAAK,CAACkB,GAAG,CAACN,SAAS;QACnBZ,KAAK,CAACkB,GAAG,CAACP,KAAK,EAAEC,SAAS,CAACV,MAAM;QACjCF,KAAK,GAAGS,QAAQ,CAACT,KAAK;QACtBA,KAAK,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,IAAI,EAAI,GAAGQ,OAAO;QACpCR,KAAK,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,IAAI,EAAI,GAAG,GAAI;QAEjC,EAAE,EAAEa,GAAG,EAAE,CAAC;YACRC,MAAM,GAAGA,MAAM,IAAI,CAAC;YAEpB,GAAG,CAAE,GAAG,CAACb,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,IAAIA,CAAC,CAAE,CAAC;gBAC5BY,GAAG,CAACC,MAAM,GAAGb,CAAC,IAAID,KAAK,CAACC,CAAC;YAC3B,CAAC;YAED,MAAM,CAACY,GAAG;QACZ,CAAC;QAED,MAAM,KAACM,YAAS,UAACnB,KAAK;IACxB,CAAC,AAAC,CAAyD,AAAzD,EAAyD,AAAzD,uDAAyD;IAG3D,GAAG,CAAC,CAAC;QACHU,YAAY,CAACH,IAAI,GAAGA,IAAI,CAAE,CAAoC,AAApC,EAAoC,AAApC,kCAAoC;IAChE,CAAC,CAAC,KAAK,EAAEa,GAAG,EAAE,CAAC,CAAC,AAAC,CAAsC,AAAtC,EAAsC,AAAtC,oCAAsC;IAGvDV,YAAY,CAACL,GAAG,GAAGA,GAAG;IACtBK,YAAY,CAACJ,GAAG,GAAGA,GAAG;IACtB,MAAM,CAACI,YAAY;AACrB,CAAC"}