{"version":3,"sources":["../../../../../../../../../libs/movie/data-access/node_modules/@supabase/storage-js/src/lib/StorageFileApi.ts"],"sourcesContent":["import { Fetch, FetchParameters, get, post, remove } from './fetch'\nimport { isBrowser } from './helpers'\nimport { FileObject, FileOptions, SearchOptions } from './types'\nimport fetch from 'cross-fetch'\n\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc',\n  },\n}\n\nconst DEFAULT_FILE_OPTIONS: FileOptions = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false,\n}\n\nexport class StorageFileApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected bucketId?: string\n  protected fetch?: Fetch\n\n  constructor(\n    url: string,\n    headers: { [key: string]: string } = {},\n    bucketId?: string,\n    fetch?: Fetch\n  ) {\n    this.url = url\n    this.headers = headers\n    this.bucketId = bucketId\n    this.fetch = fetch\n  }\n\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  private async uploadOrUpdate(\n    method: 'POST' | 'PUT',\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<{ data: { Key: string } | null; error: Error | null }> {\n    try {\n      let body\n      const options = { ...DEFAULT_FILE_OPTIONS, ...fileOptions }\n      const headers: Record<string, string> = {\n        ...this.headers,\n        ...(method === 'POST' && { 'x-upsert': String(options.upsert as boolean) }),\n      }\n\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n        body = new FormData()\n        body.append('cacheControl', options.cacheControl as string)\n        body.append('', fileBody)\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n        body = fileBody\n        body.append('cacheControl', options.cacheControl as string)\n      } else {\n        body = fileBody\n        headers['cache-control'] = `max-age=${options.cacheControl}`\n        headers['content-type'] = options.contentType as string\n      }\n\n      const cleanPath = this._removeEmptyFolders(path)\n      const _path = this._getFinalPath(cleanPath)\n      const res = await fetch(`${this.url}/object/${_path}`, {\n        method,\n        body: body as BodyInit,\n        headers,\n      })\n\n      if (res.ok) {\n        // const data = await res.json()\n        // temporary fix till backend is updated to the latest storage-api version\n        return { data: { Key: _path }, error: null }\n      } else {\n        const error = await res.json()\n        return { data: null, error }\n      }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  async upload(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<{ data: { Key: string } | null; error: Error | null }> {\n    return this.uploadOrUpdate('POST', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  async update(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<{ data: { Key: string } | null; error: Error | null }> {\n    return this.uploadOrUpdate('PUT', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Moves an existing file, optionally renaming it at the same time.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   */\n  async move(\n    fromPath: string,\n    toPath: string\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/move`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Create signed url to download file without requiring permissions. This URL can be valid for a set number of seconds.\n   *\n   * @param path The file path to be downloaded, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   */\n  async createSignedUrl(\n    path: string,\n    expiresIn: number\n  ): Promise<{\n    data: { signedURL: string } | null\n    error: Error | null\n    signedURL: string | null\n  }> {\n    try {\n      const _path = this._getFinalPath(path)\n      let data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${_path}`,\n        { expiresIn },\n        { headers: this.headers }\n      )\n      const signedURL = `${this.url}${data.signedURL}`\n      data = { signedURL }\n      return { data, error: null, signedURL }\n    } catch (error) {\n      return { data: null, error, signedURL: null }\n    }\n  }\n\n  /**\n   * Downloads a file.\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n  async download(path: string): Promise<{ data: Blob | null; error: Error | null }> {\n    try {\n      const _path = this._getFinalPath(path)\n      const res = await get(this.fetch, `${this.url}/object/${_path}`, {\n        headers: this.headers,\n        noResolveJson: true,\n      })\n      const data = await res.blob()\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Retrieve URLs for assets in public buckets\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n  getPublicUrl(\n    path: string\n  ): {\n    data: { publicURL: string } | null\n    error: Error | null\n    publicURL: string | null\n  } {\n    try {\n      const _path = this._getFinalPath(path)\n      const publicURL = `${this.url}/object/public/${_path}`\n      const data = { publicURL }\n      return { data, error: null, publicURL }\n    } catch (error) {\n      return { data: null, error, publicURL: null }\n    }\n  }\n\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to be deleted, including the path and file name. For example [`folder/image.png`].\n   */\n  async remove(paths: string[]): Promise<{ data: FileObject[] | null; error: Error | null }> {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/object/${this.bucketId}`,\n        { prefixes: paths },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(id: string): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await get(`${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await post(`${this.url}/metadata/${id}`, { ...meta }, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n\n  /**\n   * Lists all the files within a bucket.\n   * @param path The folder path.\n   * @param options Search options, including `limit`, `offset`, and `sortBy`.\n   * @param parameters Fetch parameters, currently only supports `signal`, which is an AbortController's signal\n   */\n  async list(\n    path?: string,\n    options?: SearchOptions,\n    parameters?: FetchParameters\n  ): Promise<{ data: FileObject[] | null; error: Error | null }> {\n    try {\n      const body = { ...DEFAULT_SEARCH_OPTIONS, ...options, prefix: path || '' }\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/list/${this.bucketId}`,\n        body,\n        { headers: this.headers },\n        parameters\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  _getFinalPath(path: string) {\n    return `${this.bucketId}/${path}`\n  }\n\n  _removeEmptyFolders(path: string) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/')\n  }\n}\n"],"names":["DEFAULT_SEARCH_OPTIONS","limit","offset","sortBy","column","order","DEFAULT_FILE_OPTIONS","cacheControl","contentType","upsert","StorageFileApi","uploadOrUpdate","method","path","fileBody","fileOptions","body","options","headers","String","Blob","FormData","append","cleanPath","_removeEmptyFolders","_path","_getFinalPath","res","fetch","url","ok","data","Key","error","json","upload","update","move","fromPath","toPath","post","bucketId","sourceKey","destinationKey","createSignedUrl","expiresIn","signedURL","download","get","noResolveJson","blob","getPublicUrl","publicURL","remove","paths","prefixes","list","parameters","prefix","replace"],"mappings":"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"}