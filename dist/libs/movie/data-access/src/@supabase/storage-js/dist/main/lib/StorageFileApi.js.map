{"version":3,"sources":["../../../../../../../../../../libs/movie/data-access/node_modules/@supabase/storage-js/dist/main/lib/StorageFileApi.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StorageFileApi = void 0;\nconst fetch_1 = require(\"./fetch\");\nconst cross_fetch_1 = __importDefault(require(\"cross-fetch\"));\nconst DEFAULT_SEARCH_OPTIONS = {\n    limit: 100,\n    offset: 0,\n    sortBy: {\n        column: 'name',\n        order: 'asc',\n    },\n};\nconst DEFAULT_FILE_OPTIONS = {\n    cacheControl: '3600',\n    contentType: 'text/plain;charset=UTF-8',\n    upsert: false,\n};\nclass StorageFileApi {\n    constructor(url, headers = {}, bucketId, fetch) {\n        this.url = url;\n        this.headers = headers;\n        this.bucketId = bucketId;\n        this.fetch = fetch;\n    }\n    /**\n     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n     *\n     * @param method HTTP method.\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     * @param fileOptions HTTP headers.\n     * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n     * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n     * `upsert`: boolean, whether to perform an upsert.\n     */\n    uploadOrUpdate(method, path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let body;\n                const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n                const headers = Object.assign(Object.assign({}, this.headers), (method === 'POST' && { 'x-upsert': String(options.upsert) }));\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                }\n                const cleanPath = this._removeEmptyFolders(path);\n                const _path = this._getFinalPath(cleanPath);\n                const res = yield cross_fetch_1.default(`${this.url}/object/${_path}`, {\n                    method,\n                    body: body,\n                    headers,\n                });\n                if (res.ok) {\n                    // const data = await res.json()\n                    // temporary fix till backend is updated to the latest storage-api version\n                    return { data: { Key: _path }, error: null };\n                }\n                else {\n                    const error = yield res.json();\n                    return { data: null, error };\n                }\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     * @param fileOptions HTTP headers.\n     * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n     * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n     * `upsert`: boolean, whether to perform an upsert.\n     */\n    upload(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     * @param fileOptions HTTP headers.\n     * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n     * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n     * `upsert`: boolean, whether to perform an upsert.\n     */\n    update(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Moves an existing file, optionally renaming it at the same time.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     */\n    move(fromPath, toPath) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield fetch_1.post(this.fetch, `${this.url}/object/move`, { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Create signed url to download file without requiring permissions. This URL can be valid for a set number of seconds.\n     *\n     * @param path The file path to be downloaded, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     */\n    createSignedUrl(path, expiresIn) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const _path = this._getFinalPath(path);\n                let data = yield fetch_1.post(this.fetch, `${this.url}/object/sign/${_path}`, { expiresIn }, { headers: this.headers });\n                const signedURL = `${this.url}${data.signedURL}`;\n                data = { signedURL };\n                return { data, error: null, signedURL };\n            }\n            catch (error) {\n                return { data: null, error, signedURL: null };\n            }\n        });\n    }\n    /**\n     * Downloads a file.\n     *\n     * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n     */\n    download(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const _path = this._getFinalPath(path);\n                const res = yield fetch_1.get(this.fetch, `${this.url}/object/${_path}`, {\n                    headers: this.headers,\n                    noResolveJson: true,\n                });\n                const data = yield res.blob();\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Retrieve URLs for assets in public buckets\n     *\n     * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n     */\n    getPublicUrl(path) {\n        try {\n            const _path = this._getFinalPath(path);\n            const publicURL = `${this.url}/object/public/${_path}`;\n            const data = { publicURL };\n            return { data, error: null, publicURL };\n        }\n        catch (error) {\n            return { data: null, error, publicURL: null };\n        }\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to be deleted, including the path and file name. For example [`folder/image.png`].\n     */\n    remove(paths) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield fetch_1.remove(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(id: string): Promise<{ data: Metadata | null; error: Error | null }> {\n    //   try {\n    //     const data = await get(`${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     return { data: null, error }\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<{ data: Metadata | null; error: Error | null }> {\n    //   try {\n    //     const data = await post(`${this.url}/metadata/${id}`, { ...meta }, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     return { data: null, error }\n    //   }\n    // }\n    /**\n     * Lists all the files within a bucket.\n     * @param path The folder path.\n     * @param options Search options, including `limit`, `offset`, and `sortBy`.\n     * @param parameters Fetch parameters, currently only supports `signal`, which is an AbortController's signal\n     */\n    list(path, options, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), { prefix: path || '' });\n                const data = yield fetch_1.post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    _getFinalPath(path) {\n        return `${this.bucketId}/${path}`;\n    }\n    _removeEmptyFolders(path) {\n        return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n}\nexports.StorageFileApi = StorageFileApi;\n//# sourceMappingURL=StorageFileApi.js.map"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","Object","defineProperty","exports","StorageFileApi","fetch_1","require","cross_fetch_1","DEFAULT_SEARCH_OPTIONS","limit","offset","sortBy","column","order","DEFAULT_FILE_OPTIONS","cacheControl","contentType","upsert","uploadOrUpdate","method","path","fileBody","fileOptions","body","options","assign","headers","String","Blob","FormData","append","cleanPath","_removeEmptyFolders","_path","_getFinalPath","res","default","url","ok","data","Key","error","json","upload","update","move","fromPath","toPath","post","fetch","bucketId","sourceKey","destinationKey","createSignedUrl","expiresIn","signedURL","download","get","noResolveJson","blob","getPublicUrl","publicURL","remove","paths","prefixes","list","parameters","prefix","replace"],"mappings":"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"}