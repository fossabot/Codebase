{"version":3,"sources":["../../../../../../../../../libs/movie/data-access/node_modules/@supabase/supabase-js/dist/main/SupabaseClient.d.ts"],"sourcesContent":["import { Fetch, SupabaseClientOptions } from './lib/types';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nimport { SupabaseQueryBuilder } from './lib/SupabaseQueryBuilder';\nimport { SupabaseStorageClient } from '@supabase/storage-js';\nimport { RealtimeClient, RealtimeSubscription } from '@supabase/realtime-js';\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient {\n    protected supabaseUrl: string;\n    protected supabaseKey: string;\n    /**\n     * Supabase Auth allows you to create and manage user sessions for access to data that is secured by access policies.\n     */\n    auth: SupabaseAuthClient;\n    protected schema: string;\n    protected restUrl: string;\n    protected realtimeUrl: string;\n    protected authUrl: string;\n    protected storageUrl: string;\n    protected realtime: RealtimeClient;\n    protected multiTab: boolean;\n    protected fetch?: Fetch;\n    protected changedAccessToken: string | undefined;\n    protected headers: {\n        [key: string]: string;\n    };\n    /**\n     * Create a new client for use in the browser.\n     * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n     * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n     * @param options.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n     * @param options.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n     * @param options.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n     * @param options.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n     * @param options.headers Any additional headers to send with each network request.\n     * @param options.realtime Options passed along to realtime-js constructor.\n     * @param options.multiTab Set to \"false\" if you want to disable multi-tab/window events.\n     * @param options.fetch A custom fetch implementation.\n     */\n    constructor(supabaseUrl: string, supabaseKey: string, options?: SupabaseClientOptions);\n    /**\n     * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n     */\n    get storage(): SupabaseStorageClient;\n    /**\n     * Perform a table operation.\n     *\n     * @param table The table name to operate on.\n     */\n    from<T = any>(table: string): SupabaseQueryBuilder<T>;\n    /**\n     * Perform a function call.\n     *\n     * @param fn  The function name to call.\n     * @param params  The parameters to pass to the function call.\n     * @param head   When set to true, no data will be returned.\n     * @param count  Count algorithm to use to count rows in a table.\n     *\n     */\n    rpc<T = any>(fn: string, params?: object, { head, count, }?: {\n        head?: boolean;\n        count?: null | 'exact' | 'planned' | 'estimated';\n    }): import(\"@supabase/postgrest-js\").PostgrestFilterBuilder<T>;\n    /**\n     * Closes and removes all subscriptions and returns a list of removed\n     * subscriptions and their errors.\n     */\n    removeAllSubscriptions(): Promise<{\n        data: {\n            subscription: RealtimeSubscription;\n        };\n        error: Error | null;\n    }[]>;\n    /**\n     * Closes and removes a subscription and returns the number of open subscriptions.\n     *\n     * @param subscription The subscription you want to close and remove.\n     */\n    removeSubscription(subscription: RealtimeSubscription): Promise<{\n        data: {\n            openSubscriptions: number;\n        };\n        error: Error | null;\n    }>;\n    private _closeSubscription;\n    private _unsubscribeSubscription;\n    /**\n     * Returns an array of all your subscriptions.\n     */\n    getSubscriptions(): RealtimeSubscription[];\n    private _initSupabaseAuthClient;\n    private _initRealtimeClient;\n    private _initPostgRESTClient;\n    private _getAuthHeaders;\n    private _listenForMultiTabEvents;\n    private _listenForAuthEvents;\n    private _handleTokenChanged;\n}\n//# sourceMappingURL=SupabaseClient.d.ts.map"],"names":["SupabaseClient"],"mappings":";;AAUe,GAAK,CAACA,cAAc,SAAdA,cAAc;CA2FnC,CAA4C,AAA5C,EAA4C,AAA5C,0CAA4C;;kBA3FvBA,cAAc"}