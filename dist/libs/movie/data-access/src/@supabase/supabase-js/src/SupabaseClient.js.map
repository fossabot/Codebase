{"version":3,"sources":["../../../../../../../../libs/movie/data-access/node_modules/@supabase/supabase-js/src/SupabaseClient.ts"],"sourcesContent":["import { DEFAULT_HEADERS, STORAGE_KEY } from './lib/constants'\nimport { stripTrailingSlash, isBrowser } from './lib/helpers'\nimport { Fetch, GenericObject, SupabaseClientOptions } from './lib/types'\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient'\nimport { SupabaseQueryBuilder } from './lib/SupabaseQueryBuilder'\nimport { SupabaseStorageClient } from '@supabase/storage-js'\nimport { PostgrestClient } from '@supabase/postgrest-js'\nimport { AuthChangeEvent, Session, Subscription } from '@supabase/gotrue-js'\nimport { RealtimeClient, RealtimeSubscription, RealtimeClientOptions } from '@supabase/realtime-js'\n\nconst DEFAULT_OPTIONS = {\n  schema: 'public',\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  multiTab: true,\n  headers: DEFAULT_HEADERS,\n}\n\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient {\n  /**\n   * Supabase Auth allows you to create and manage user sessions for access to data that is secured by access policies.\n   */\n  auth: SupabaseAuthClient\n\n  protected schema: string\n  protected restUrl: string\n  protected realtimeUrl: string\n  protected authUrl: string\n  protected storageUrl: string\n  protected realtime: RealtimeClient\n  protected multiTab: boolean\n  protected fetch?: Fetch\n  protected changedAccessToken: string | undefined\n  protected headers: {\n    [key: string]: string\n  }\n\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.headers Any additional headers to send with each network request.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.multiTab Set to \"false\" if you want to disable multi-tab/window events.\n   * @param options.fetch A custom fetch implementation.\n   */\n  constructor(\n    protected supabaseUrl: string,\n    protected supabaseKey: string,\n    options?: SupabaseClientOptions\n  ) {\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.')\n    if (!supabaseKey) throw new Error('supabaseKey is required.')\n\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl)\n    const settings = { ...DEFAULT_OPTIONS, ...options }\n\n    this.restUrl = `${_supabaseUrl}/rest/v1`\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace('http', 'ws')\n    this.authUrl = `${_supabaseUrl}/auth/v1`\n    this.storageUrl = `${_supabaseUrl}/storage/v1`\n    this.schema = settings.schema\n    this.multiTab = settings.multiTab\n    this.fetch = settings.fetch\n    this.headers = { ...DEFAULT_HEADERS, ...options?.headers }\n\n    this.auth = this._initSupabaseAuthClient(settings)\n    this.realtime = this._initRealtimeClient({ headers: this.headers, ...settings.realtime })\n\n    this._listenForAuthEvents()\n    this._listenForMultiTabEvents()\n\n    // In the future we might allow the user to pass in a logger to receive these events.\n    // this.realtime.onOpen(() => console.log('OPEN'))\n    // this.realtime.onClose(() => console.log('CLOSED'))\n    // this.realtime.onError((e: Error) => console.log('Socket error', e))\n  }\n\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this._getAuthHeaders(), this.fetch)\n  }\n\n  /**\n   * Perform a table operation.\n   *\n   * @param table The table name to operate on.\n   */\n  from<T = any>(table: string): SupabaseQueryBuilder<T> {\n    const url = `${this.restUrl}/${table}`\n    return new SupabaseQueryBuilder<T>(url, {\n      headers: this._getAuthHeaders(),\n      schema: this.schema,\n      realtime: this.realtime,\n      table,\n      fetch: this.fetch,\n    })\n  }\n\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param params  The parameters to pass to the function call.\n   * @param head   When set to true, no data will be returned.\n   * @param count  Count algorithm to use to count rows in a table.\n   *\n   */\n  rpc<T = any>(\n    fn: string,\n    params?: object,\n    {\n      head = false,\n      count = null,\n    }: { head?: boolean; count?: null | 'exact' | 'planned' | 'estimated' } = {}\n  ) {\n    const rest = this._initPostgRESTClient()\n    return rest.rpc<T>(fn, params, { head, count })\n  }\n\n  /**\n   * Closes and removes all subscriptions and returns a list of removed\n   * subscriptions and their errors.\n   */\n  async removeAllSubscriptions(): Promise<\n    { data: { subscription: RealtimeSubscription }; error: Error | null }[]\n  > {\n    const allSubs: RealtimeSubscription[] = this.getSubscriptions().slice()\n    const allSubPromises = allSubs.map((sub) => this.removeSubscription(sub))\n    const allRemovedSubs = await Promise.all(allSubPromises)\n\n    return allRemovedSubs.map(({ error }, i) => {\n      return {\n        data: { subscription: allSubs[i] },\n        error,\n      }\n    })\n  }\n\n  /**\n   * Closes and removes a subscription and returns the number of open subscriptions.\n   *\n   * @param subscription The subscription you want to close and remove.\n   */\n  async removeSubscription(\n    subscription: RealtimeSubscription\n  ): Promise<{ data: { openSubscriptions: number }; error: Error | null }> {\n    const { error } = await this._closeSubscription(subscription)\n    const allSubs: RealtimeSubscription[] = this.getSubscriptions()\n    const openSubCount = allSubs.filter((chan) => chan.isJoined()).length\n\n    if (allSubs.length === 0) await this.realtime.disconnect()\n\n    return { data: { openSubscriptions: openSubCount }, error }\n  }\n\n  private async _closeSubscription(\n    subscription: RealtimeSubscription\n  ): Promise<{ error: Error | null }> {\n    let error = null\n\n    if (!subscription.isClosed()) {\n      const { error: unsubError } = await this._unsubscribeSubscription(subscription)\n      error = unsubError\n    }\n\n    this.realtime.remove(subscription)\n\n    return { error }\n  }\n\n  private _unsubscribeSubscription(\n    subscription: RealtimeSubscription\n  ): Promise<{ error: Error | null }> {\n    return new Promise((resolve) => {\n      subscription\n        .unsubscribe()\n        .receive('ok', () => resolve({ error: null }))\n        .receive('error', (error: Error) => resolve({ error }))\n        .receive('timeout', () => resolve({ error: new Error('timed out') }))\n    })\n  }\n\n  /**\n   * Returns an array of all your subscriptions.\n   */\n  getSubscriptions(): RealtimeSubscription[] {\n    return this.realtime.channels\n  }\n\n  private _initSupabaseAuthClient({\n    autoRefreshToken,\n    persistSession,\n    detectSessionInUrl,\n    localStorage,\n    headers,\n    fetch,\n  }: SupabaseClientOptions) {\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`,\n    }\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: { ...headers, ...authHeaders },\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      localStorage,\n      fetch,\n    })\n  }\n\n  private _initRealtimeClient(options?: RealtimeClientOptions) {\n    return new RealtimeClient(this.realtimeUrl, {\n      ...options,\n      params: { ...options?.params, apikey: this.supabaseKey },\n    })\n  }\n\n  private _initPostgRESTClient() {\n    return new PostgrestClient(this.restUrl, {\n      headers: this._getAuthHeaders(),\n      schema: this.schema,\n      fetch: this.fetch,\n    })\n  }\n\n  private _getAuthHeaders(): GenericObject {\n    const headers: GenericObject = this.headers\n    const authBearer = this.auth.session()?.access_token ?? this.supabaseKey\n    headers['apikey'] = this.supabaseKey\n    headers['Authorization'] = `Bearer ${authBearer}`\n    return headers\n  }\n\n  private _listenForMultiTabEvents() {\n    if (!this.multiTab || !isBrowser() || !window?.addEventListener) {\n      return null\n    }\n\n    try {\n      return window?.addEventListener('storage', (e: StorageEvent) => {\n        if (e.key === STORAGE_KEY) {\n          const newSession = JSON.parse(String(e.newValue))\n          const accessToken: string | undefined =\n            newSession?.currentSession?.access_token ?? undefined\n          const previousAccessToken = this.auth.session()?.access_token\n          if (!accessToken) {\n            this._handleTokenChanged('SIGNED_OUT', accessToken, 'STORAGE')\n          } else if (!previousAccessToken && accessToken) {\n            this._handleTokenChanged('SIGNED_IN', accessToken, 'STORAGE')\n          } else if (previousAccessToken !== accessToken) {\n            this._handleTokenChanged('TOKEN_REFRESHED', accessToken, 'STORAGE')\n          }\n        }\n      })\n    } catch (error) {\n      console.error('_listenForMultiTabEvents', error)\n      return null\n    }\n  }\n\n  private _listenForAuthEvents() {\n    let { data } = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, session?.access_token, 'CLIENT')\n    })\n    return data\n  }\n\n  private _handleTokenChanged(\n    event: AuthChangeEvent,\n    token: string | undefined,\n    source: 'CLIENT' | 'STORAGE'\n  ) {\n    if (\n      (event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n      this.changedAccessToken !== token\n    ) {\n      // Token has changed\n      this.realtime.setAuth(token!)\n      // Ideally we should call this.auth.recoverSession() - need to make public\n      // to trigger a \"SIGNED_IN\" event on this client.\n      if (source == 'STORAGE') this.auth.setAuth(token!)\n\n      this.changedAccessToken = token\n    } else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n      // Token is removed\n      this.realtime.setAuth(this.supabaseKey)\n      if (source == 'STORAGE') this.auth.signOut()\n    }\n  }\n}\n"],"names":["DEFAULT_OPTIONS","schema","autoRefreshToken","persistSession","detectSessionInUrl","multiTab","headers","DEFAULT_HEADERS","SupabaseClient","storage","SupabaseStorageClient","storageUrl","_getAuthHeaders","fetch","from","table","url","restUrl","SupabaseQueryBuilder","realtime","rpc","fn","params","head","count","rest","_initPostgRESTClient","removeAllSubscriptions","allSubs","getSubscriptions","slice","allSubPromises","map","sub","removeSubscription","allRemovedSubs","Promise","all","error","i","data","subscription","_closeSubscription","openSubCount","filter","chan","isJoined","length","disconnect","openSubscriptions","isClosed","unsubError","_unsubscribeSubscription","remove","resolve","unsubscribe","receive","Error","channels","_initSupabaseAuthClient","localStorage","authHeaders","Authorization","supabaseKey","apikey","SupabaseAuthClient","authUrl","_initRealtimeClient","options","RealtimeClient","realtimeUrl","PostgrestClient","authBearer","auth","session","access_token","_listenForMultiTabEvents","isBrowser","window","addEventListener","e","key","STORAGE_KEY","newSession","JSON","parse","String","newValue","accessToken","currentSession","undefined","previousAccessToken","_handleTokenChanged","console","_listenForAuthEvents","onAuthStateChange","event","token","source","changedAccessToken","setAuth","signOut","supabaseUrl","_supabaseUrl","stripTrailingSlash","settings","replace"],"mappings":"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"}