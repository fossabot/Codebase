{"version":3,"sources":["../../../../../../../../../libs/movie/data-access/node_modules/@supabase/supabase-js/src/lib/SupabaseQueryBuilder.ts"],"sourcesContent":["import { PostgrestQueryBuilder } from '@supabase/postgrest-js'\nimport { SupabaseRealtimeClient } from './SupabaseRealtimeClient'\nimport { RealtimeClient } from '@supabase/realtime-js'\nimport { Fetch, GenericObject, SupabaseEventTypes, SupabaseRealtimePayload } from './types'\n\nexport class SupabaseQueryBuilder<T> extends PostgrestQueryBuilder<T> {\n  private _subscription: SupabaseRealtimeClient | null = null\n  private _realtime: RealtimeClient\n  private _headers: GenericObject\n  private _schema: string\n  private _table: string\n\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      realtime,\n      table,\n      fetch,\n    }: {\n      headers?: GenericObject\n      schema: string\n      realtime: RealtimeClient\n      table: string\n      fetch?: Fetch\n    }\n  ) {\n    super(url, { headers, schema, fetch })\n\n    this._realtime = realtime\n    this._headers = headers\n    this._schema = schema\n    this._table = table\n  }\n\n  /**\n   * Subscribe to realtime changes in your database.\n   * @param event The database event which you would like to receive updates for, or you can use the special wildcard `*` to listen to all changes.\n   * @param callback A callback that will handle the payload that is sent whenever your database changes.\n   */\n  on(\n    event: SupabaseEventTypes,\n    callback: (payload: SupabaseRealtimePayload<T>) => void\n  ): SupabaseRealtimeClient {\n    if (!this._realtime.isConnected()) {\n      this._realtime.connect()\n    }\n    if (!this._subscription) {\n      this._subscription = new SupabaseRealtimeClient(\n        this._realtime,\n        this._headers,\n        this._schema,\n        this._table\n      )\n    }\n    return this._subscription.on(event, callback)\n  }\n}\n"],"names":["SupabaseQueryBuilder","PostgrestQueryBuilder","on","event","callback","_realtime","isConnected","connect","_subscription","SupabaseRealtimeClient","_headers","_schema","_table","url","headers","schema","realtime","table","fetch"],"mappings":";AAAsC,GAAwB,CAAxB,YAAwB;AACvB,GAA0B,CAA1B,uBAA0B;AAI1D,GAAK,CAACA,oBAAoB,SAApBA,oBAAoB,SAAYC,YAAqB;IA+BhE,EAIG,AAJH;;;;GAIG,AAJH,EAIG,CACHC,EAAE,CACAC,KAAyB,EACzBC,QAAuD,EAC/B,CAAC;QACzB,EAAE,GAAG,IAAI,CAACC,SAAS,CAACC,WAAW,IAAI,CAAC;YAClC,IAAI,CAACD,SAAS,CAACE,OAAO;QACxB,CAAC;QACD,EAAE,GAAG,IAAI,CAACC,aAAa,EAAE,CAAC;YACxB,IAAI,CAACA,aAAa,GAAG,GAAG,CAACC,uBAAsB,wBAC7C,IAAI,CAACJ,SAAS,EACd,IAAI,CAACK,QAAQ,EACb,IAAI,CAACC,OAAO,EACZ,IAAI,CAACC,MAAM;QAEf,CAAC;QACD,MAAM,CAAC,IAAI,CAACJ,aAAa,CAACN,EAAE,CAACC,KAAK,EAAEC,QAAQ;IAC9C,CAAC;gBA5CCS,GAAW,EACX,CAAC,CACCC,OAAO,EAAG,CAAC,CAAC,GACZC,MAAM,GACNC,QAAQ,GACRC,KAAK,GACLC,KAAK,EAOP,CAAC,CACD,CAAC;QACD,KAAK,CAACL,GAAG,EAAE,CAAC;YAACC,OAAO;YAAEC,MAAM;YAAEG,KAAK;QAAC,CAAC;QAvBlC,IAqDN,CApDSV,aAAa,GAAkC,IAAI;QAwBzD,IAAI,CAACH,SAAS,GAAGW,QAAQ;QACzB,IAAI,CAACN,QAAQ,GAAGI,OAAO;QACvB,IAAI,CAACH,OAAO,GAAGI,MAAM;QACrB,IAAI,CAACH,MAAM,GAAGK,KAAK;IACrB,CAAC;;QA7BUjB,oBAAoB,GAApBA,oBAAoB"}