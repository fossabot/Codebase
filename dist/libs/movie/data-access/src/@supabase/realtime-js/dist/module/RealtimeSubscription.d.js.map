{"version":3,"sources":["../../../../../../../../../libs/movie/data-access/node_modules/@supabase/realtime-js/dist/module/RealtimeSubscription.d.ts"],"sourcesContent":["import { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants';\nimport Push from './lib/push';\nimport RealtimeClient from './RealtimeClient';\nimport Timer from './lib/timer';\nexport default class RealtimeSubscription {\n    topic: string;\n    params: {\n        [key: string]: unknown;\n    };\n    socket: RealtimeClient;\n    bindings: any[];\n    timeout: number;\n    state: CHANNEL_STATES;\n    joinedOnce: boolean;\n    joinPush: Push;\n    rejoinTimer: Timer;\n    pushBuffer: Push[];\n    constructor(topic: string, params: {\n        [key: string]: unknown;\n    }, socket: RealtimeClient);\n    rejoinUntilConnected(): void;\n    subscribe(timeout?: number): Push;\n    onClose(callback: Function): void;\n    onError(callback: Function): void;\n    on(event: string, callback: Function): void;\n    off(event: string): void;\n    canPush(): boolean;\n    push(event: CHANNEL_EVENTS, payload: any, timeout?: number): Push;\n    updateJoinPayload(payload: {\n        [key: string]: unknown;\n    }): void;\n    /**\n     * Leaves the channel\n     *\n     * Unsubscribes from server events, and instructs channel to terminate on server.\n     * Triggers onClose() hooks.\n     *\n     * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n     * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n     */\n    unsubscribe(timeout?: number): Push;\n    /**\n     * Overridable message hook\n     *\n     * Receives all events for specialized message handling before dispatching to the channel callbacks.\n     * Must return the payload, modified or unmodified.\n     */\n    onMessage(event: string, payload: any, ref?: string): any;\n    isMember(topic: string): boolean;\n    joinRef(): string;\n    rejoin(timeout?: number): void;\n    trigger(event: string, payload?: any, ref?: string): void;\n    replyEventName(ref: string): string;\n    isClosed(): boolean;\n    isErrored(): boolean;\n    isJoined(): boolean;\n    isJoining(): boolean;\n    isLeaving(): boolean;\n}\n//# sourceMappingURL=RealtimeSubscription.d.ts.map"],"names":["RealtimeSubscription"],"mappings":";;AAIe,GAAK,CAACA,oBAAoB,SAApBA,oBAAoB;CAuDzC,CAAkD,AAAlD,EAAkD,AAAlD,gDAAkD;;kBAvD7BA,oBAAoB"}