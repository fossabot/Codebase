{"version":3,"sources":["../../../../../../../../../libs/movie/data-access/node_modules/@supabase/realtime-js/dist/module/RealtimeClient.d.ts"],"sourcesContent":["import Timer from './lib/timer';\nimport RealtimeSubscription from './RealtimeSubscription';\nimport { w3cwebsocket as WebSocket } from 'websocket';\nimport Serializer from './lib/serializer';\nexport declare type Options = {\n    transport?: WebSocket;\n    timeout?: number;\n    heartbeatIntervalMs?: number;\n    longpollerTimeout?: number;\n    logger?: Function;\n    encode?: Function;\n    decode?: Function;\n    reconnectAfterMs?: Function;\n    headers?: {\n        [key: string]: string;\n    };\n    params?: {\n        [key: string]: string;\n    };\n};\ndeclare type Message = {\n    topic: string;\n    event: string;\n    payload: any;\n    ref: string;\n};\nexport default class RealtimeClient {\n    accessToken: string | null;\n    channels: RealtimeSubscription[];\n    endPoint: string;\n    headers?: {\n        [key: string]: string;\n    };\n    params?: {\n        [key: string]: string;\n    };\n    timeout: number;\n    transport: any;\n    heartbeatIntervalMs: number;\n    longpollerTimeout: number;\n    heartbeatTimer: ReturnType<typeof setInterval> | undefined;\n    pendingHeartbeatRef: string | null;\n    ref: number;\n    reconnectTimer: Timer;\n    logger: Function;\n    encode: Function;\n    decode: Function;\n    reconnectAfterMs: Function;\n    conn: WebSocket | null;\n    sendBuffer: Function[];\n    serializer: Serializer;\n    stateChangeCallbacks: {\n        open: Function[];\n        close: Function[];\n        error: Function[];\n        message: Function[];\n    };\n    /**\n     * Initializes the Socket\n     *\n     * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n     * @param options.transport The Websocket Transport, for example WebSocket.\n     * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n     * @param options.params The optional params to pass when connecting.\n     * @param options.headers The optional headers to pass when connecting.\n     * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n     * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n     * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n     * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n     * @param options.longpollerTimeout The maximum timeout of a long poll AJAX request. Defaults to 20s (double the server long poll timer).\n     * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n     */\n    constructor(endPoint: string, options?: Options);\n    /**\n     * Connects the socket.\n     */\n    connect(): void;\n    /**\n     * Disconnects the socket.\n     *\n     * @param code A numeric status code to send on disconnect.\n     * @param reason A custom reason for the disconnect.\n     */\n    disconnect(code?: number, reason?: string): Promise<{\n        error: Error | null;\n        data: boolean;\n    }>;\n    /**\n     * Logs the message. Override `this.logger` for specialized logging.\n     */\n    log(kind: string, msg: string, data?: any): void;\n    /**\n     * Registers a callback for connection state change event.\n     * @param callback A function to be called when the event occurs.\n     *\n     * @example\n     *    socket.onOpen(() => console.log(\"Socket opened.\"))\n     */\n    onOpen(callback: Function): void;\n    /**\n     * Registers a callbacks for connection state change events.\n     * @param callback A function to be called when the event occurs.\n     *\n     * @example\n     *    socket.onOpen(() => console.log(\"Socket closed.\"))\n     */\n    onClose(callback: Function): void;\n    /**\n     * Registers a callback for connection state change events.\n     * @param callback A function to be called when the event occurs.\n     *\n     * @example\n     *    socket.onOpen((error) => console.log(\"An error occurred\"))\n     */\n    onError(callback: Function): void;\n    /**\n     * Calls a function any time a message is received.\n     * @param callback A function to be called when the event occurs.\n     *\n     * @example\n     *    socket.onMessage((message) => console.log(message))\n     */\n    onMessage(callback: Function): void;\n    /**\n     * Returns the current state of the socket.\n     */\n    connectionState(): \"closed\" | \"connecting\" | \"open\" | \"closing\";\n    /**\n     * Retuns `true` is the connection is open.\n     */\n    isConnected(): boolean;\n    /**\n     * Removes a subscription from the socket.\n     *\n     * @param channel An open subscription.\n     */\n    remove(channel: RealtimeSubscription): void;\n    channel(topic: string, chanParams?: {}): RealtimeSubscription;\n    push(data: Message): void;\n    onConnMessage(rawMessage: any): void;\n    /**\n     * Returns the URL of the websocket.\n     */\n    endPointURL(): string;\n    /**\n     * Return the next message ref, accounting for overflows\n     */\n    makeRef(): string;\n    /**\n     * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n     *\n     * @param token A JWT string.\n     */\n    setAuth(token: string | null): void;\n    leaveOpenTopic(topic: string): void;\n    private _onConnOpen;\n    private _onConnClose;\n    private _onConnError;\n    private _triggerChanError;\n    private _appendParams;\n    private _flushSendBuffer;\n    private _resetHeartbeat;\n    private _sendHeartbeat;\n}\nexport {};\n//# sourceMappingURL=RealtimeClient.d.ts.map"],"names":["RealtimeClient"],"mappings":";;AA0Be,GAAK,CAACA,cAAc,SAAdA,cAAc;;kBAAdA,cAAc"}