{"version":3,"sources":["../../../../../../../../../../libs/movie/data-access/node_modules/@supabase/realtime-js/dist/main/lib/transformers.js"],"sourcesContent":["\"use strict\";\n/**\n * Helpers to convert the change Payload into native JS types.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toTimestampString = exports.toArray = exports.toJson = exports.toNumber = exports.toBoolean = exports.convertCell = exports.convertColumn = exports.convertChangeData = exports.PostgresTypes = void 0;\n// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\nvar PostgresTypes;\n(function (PostgresTypes) {\n    PostgresTypes[\"abstime\"] = \"abstime\";\n    PostgresTypes[\"bool\"] = \"bool\";\n    PostgresTypes[\"date\"] = \"date\";\n    PostgresTypes[\"daterange\"] = \"daterange\";\n    PostgresTypes[\"float4\"] = \"float4\";\n    PostgresTypes[\"float8\"] = \"float8\";\n    PostgresTypes[\"int2\"] = \"int2\";\n    PostgresTypes[\"int4\"] = \"int4\";\n    PostgresTypes[\"int4range\"] = \"int4range\";\n    PostgresTypes[\"int8\"] = \"int8\";\n    PostgresTypes[\"int8range\"] = \"int8range\";\n    PostgresTypes[\"json\"] = \"json\";\n    PostgresTypes[\"jsonb\"] = \"jsonb\";\n    PostgresTypes[\"money\"] = \"money\";\n    PostgresTypes[\"numeric\"] = \"numeric\";\n    PostgresTypes[\"oid\"] = \"oid\";\n    PostgresTypes[\"reltime\"] = \"reltime\";\n    PostgresTypes[\"text\"] = \"text\";\n    PostgresTypes[\"time\"] = \"time\";\n    PostgresTypes[\"timestamp\"] = \"timestamp\";\n    PostgresTypes[\"timestamptz\"] = \"timestamptz\";\n    PostgresTypes[\"timetz\"] = \"timetz\";\n    PostgresTypes[\"tsrange\"] = \"tsrange\";\n    PostgresTypes[\"tstzrange\"] = \"tstzrange\";\n})(PostgresTypes = exports.PostgresTypes || (exports.PostgresTypes = {}));\n/**\n * Takes an array of columns and an object of string values then converts each string value\n * to its mapped type.\n *\n * @param {{name: String, type: String}[]} columns\n * @param {Object} record\n * @param {Object} options The map of various options that can be applied to the mapper\n * @param {Array} options.skipTypes The array of types that should not be converted\n *\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n * //=>{ first_name: 'Paul', age: 33 }\n */\nconst convertChangeData = (columns, record, options = {}) => {\n    var _a;\n    const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\n    return Object.keys(record).reduce((acc, rec_key) => {\n        acc[rec_key] = (0, exports.convertColumn)(rec_key, columns, record, skipTypes);\n        return acc;\n    }, {});\n};\nexports.convertChangeData = convertChangeData;\n/**\n * Converts the value of an individual column.\n *\n * @param {String} columnName The column that you want to convert\n * @param {{name: String, type: String}[]} columns All of the columns\n * @param {Object} record The map of string values\n * @param {Array} skipTypes An array of types that should not be converted\n * @return {object} Useless information\n *\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n * //=> 33\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n * //=> \"33\"\n */\nconst convertColumn = (columnName, columns, record, skipTypes) => {\n    const column = columns.find((x) => x.name === columnName);\n    const colType = column === null || column === void 0 ? void 0 : column.type;\n    const value = record[columnName];\n    if (colType && !skipTypes.includes(colType)) {\n        return (0, exports.convertCell)(colType, value);\n    }\n    return noop(value);\n};\nexports.convertColumn = convertColumn;\n/**\n * If the value of the cell is `null`, returns null.\n * Otherwise converts the string value to the correct type.\n * @param {String} type A postgres column type\n * @param {String} stringValue The cell value\n *\n * @example convertCell('bool', 't')\n * //=> true\n * @example convertCell('int8', '10')\n * //=> 10\n * @example convertCell('_int4', '{1,2,3,4}')\n * //=> [1,2,3,4]\n */\nconst convertCell = (type, value) => {\n    // if data type is an array\n    if (type.charAt(0) === '_') {\n        const dataType = type.slice(1, type.length);\n        return (0, exports.toArray)(value, dataType);\n    }\n    // If not null, convert to correct type.\n    switch (type) {\n        case PostgresTypes.bool:\n            return (0, exports.toBoolean)(value);\n        case PostgresTypes.float4:\n        case PostgresTypes.float8:\n        case PostgresTypes.int2:\n        case PostgresTypes.int4:\n        case PostgresTypes.int8:\n        case PostgresTypes.numeric:\n        case PostgresTypes.oid:\n            return (0, exports.toNumber)(value);\n        case PostgresTypes.json:\n        case PostgresTypes.jsonb:\n            return (0, exports.toJson)(value);\n        case PostgresTypes.timestamp:\n            return (0, exports.toTimestampString)(value); // Format to be consistent with PostgREST\n        case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n        case PostgresTypes.date: // To allow users to cast it based on Timezone\n        case PostgresTypes.daterange:\n        case PostgresTypes.int4range:\n        case PostgresTypes.int8range:\n        case PostgresTypes.money:\n        case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n        case PostgresTypes.text:\n        case PostgresTypes.time: // To allow users to cast it based on Timezone\n        case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n        case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n        case PostgresTypes.tsrange:\n        case PostgresTypes.tstzrange:\n            return noop(value);\n        default:\n            // Return the value for remaining types\n            return noop(value);\n    }\n};\nexports.convertCell = convertCell;\nconst noop = (value) => {\n    return value;\n};\nconst toBoolean = (value) => {\n    switch (value) {\n        case 't':\n            return true;\n        case 'f':\n            return false;\n        default:\n            return value;\n    }\n};\nexports.toBoolean = toBoolean;\nconst toNumber = (value) => {\n    if (typeof value === 'string') {\n        const parsedValue = parseFloat(value);\n        if (!Number.isNaN(parsedValue)) {\n            return parsedValue;\n        }\n    }\n    return value;\n};\nexports.toNumber = toNumber;\nconst toJson = (value) => {\n    if (typeof value === 'string') {\n        try {\n            return JSON.parse(value);\n        }\n        catch (error) {\n            console.log(`JSON parse error: ${error}`);\n            return value;\n        }\n    }\n    return value;\n};\nexports.toJson = toJson;\n/**\n * Converts a Postgres Array into a native JS array\n *\n * @example toArray('{}', 'int4')\n * //=> []\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n * @example toArray([1,2,3,4], 'int4')\n * //=> [1,2,3,4]\n */\nconst toArray = (value, type) => {\n    if (typeof value !== 'string') {\n        return value;\n    }\n    const lastIdx = value.length - 1;\n    const closeBrace = value[lastIdx];\n    const openBrace = value[0];\n    // Confirm value is a Postgres array by checking curly brackets\n    if (openBrace === '{' && closeBrace === '}') {\n        let arr;\n        const valTrim = value.slice(1, lastIdx);\n        // TODO: find a better solution to separate Postgres array data\n        try {\n            arr = JSON.parse('[' + valTrim + ']');\n        }\n        catch (_) {\n            // WARNING: splitting on comma does not cover all edge cases\n            arr = valTrim ? valTrim.split(',') : [];\n        }\n        return arr.map((val) => (0, exports.convertCell)(type, val));\n    }\n    return value;\n};\nexports.toArray = toArray;\n/**\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n * See https://github.com/supabase/supabase/issues/18\n *\n * @example toTimestampString('2019-09-10 00:00:00')\n * //=> '2019-09-10T00:00:00'\n */\nconst toTimestampString = (value) => {\n    if (typeof value === 'string') {\n        return value.replace(' ', 'T');\n    }\n    return value;\n};\nexports.toTimestampString = toTimestampString;\n//# sourceMappingURL=transformers.js.map"],"names":["Object","defineProperty","exports","value","toTimestampString","toArray","toJson","toNumber","toBoolean","convertCell","convertColumn","convertChangeData","PostgresTypes","columns","record","options","_a","skipTypes","keys","reduce","acc","rec_key","columnName","column","find","x","name","colType","type","includes","noop","charAt","dataType","slice","length","bool","float4","float8","int2","int4","int8","numeric","oid","json","jsonb","timestamp","abstime","date","daterange","int4range","int8range","money","reltime","text","time","timestamptz","timetz","tsrange","tstzrange","parsedValue","parseFloat","Number","isNaN","JSON","parse","error","console","log","lastIdx","closeBrace","openBrace","arr","valTrim","_","split","map","val","replace"],"mappings":"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"}