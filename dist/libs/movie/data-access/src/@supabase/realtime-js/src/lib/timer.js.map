{"version":3,"sources":["../../../../../../../../../libs/movie/data-access/node_modules/@supabase/realtime-js/src/lib/timer.ts"],"sourcesContent":["/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n  timer: number | undefined = undefined\n  tries: number = 0\n\n  constructor(public callback: Function, public timerCalc: Function) {\n    this.callback = callback\n    this.timerCalc = timerCalc\n  }\n\n  reset() {\n    this.tries = 0\n    clearTimeout(this.timer)\n  }\n\n  // Cancels any previous scheduleTimeout and schedules callback\n  scheduleTimeout() {\n    clearTimeout(this.timer)\n\n    this.timer = <any>setTimeout(() => {\n      this.tries = this.tries + 1\n      this.callback()\n    }, this.timerCalc(this.tries + 1))\n  }\n}\n"],"names":["Timer","reset","tries","clearTimeout","timer","scheduleTimeout","setTimeout","callback","timerCalc","undefined"],"mappings":";;AAYe,GAAK,CAACA,KAAK,SAALA,KAAK;IASxBC,KAAK,GAAG,CAAC;QACP,IAAI,CAACC,KAAK,GAAG,CAAC;QACdC,YAAY,CAAC,IAAI,CAACC,KAAK;IACzB,CAAC;IAED,EAA8D,AAA9D,4DAA8D;IAC9DC,eAAe,GAAG,CAAC;QACjBF,YAAY,CAAC,IAAI,CAACC,KAAK;QAEvB,IAAI,CAACA,KAAK,GAAQE,UAAU,KAAO,CAAC;YAClC,IAAI,CAACJ,KAAK,GAAG,IAAI,CAACA,KAAK,GAAG,CAAC;YAC3B,IAAI,CAACK,QAAQ;QACf,CAAC,EAAE,IAAI,CAACC,SAAS,CAAC,IAAI,CAACN,KAAK,GAAG,CAAC;IAClC,CAAC;gBAlBkBK,QAAkB,EAASC,SAAmB,CAAE,CAAC;aAAjDD,QAAkB,GAAlBA,QAAkB;aAASC,SAAmB,GAAnBA,SAAmB;QAJpD,IAuBd,CAtBCJ,KAAK,GAAuBK,SAAS;QADxB,IAuBd,CArBCP,KAAK,GAAW,CAAC;QAGf,IAAI,CAACK,QAAQ,GAAGA,QAAQ;QACxB,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC5B,CAAC;;kBAPkBR,KAAK"}