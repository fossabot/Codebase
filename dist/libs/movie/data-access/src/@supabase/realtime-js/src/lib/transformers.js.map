{"version":3,"sources":["../../../../../../../../../libs/movie/data-access/node_modules/@supabase/realtime-js/src/lib/transformers.ts"],"sourcesContent":["/**\n * Helpers to convert the change Payload into native JS types.\n */\n\n// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\n\nexport enum PostgresTypes {\n  abstime = 'abstime',\n  bool = 'bool',\n  date = 'date',\n  daterange = 'daterange',\n  float4 = 'float4',\n  float8 = 'float8',\n  int2 = 'int2',\n  int4 = 'int4',\n  int4range = 'int4range',\n  int8 = 'int8',\n  int8range = 'int8range',\n  json = 'json',\n  jsonb = 'jsonb',\n  money = 'money',\n  numeric = 'numeric',\n  oid = 'oid',\n  reltime = 'reltime',\n  text = 'text',\n  time = 'time',\n  timestamp = 'timestamp',\n  timestamptz = 'timestamptz',\n  timetz = 'timetz',\n  tsrange = 'tsrange',\n  tstzrange = 'tstzrange',\n}\n\ntype Columns = {\n  name: string // the column name. eg: \"user_id\"\n  type: string // the column type. eg: \"uuid\"\n  flags?: string[] // any special flags for the column. eg: [\"key\"]\n  type_modifier?: number // the type modifier. eg: 4294967295\n}[]\n\ntype BaseValue = null | string | number | boolean\ntype RecordValue = BaseValue | BaseValue[]\n\ntype Record = {\n  [key: string]: RecordValue\n}\n\n/**\n * Takes an array of columns and an object of string values then converts each string value\n * to its mapped type.\n *\n * @param {{name: String, type: String}[]} columns\n * @param {Object} record\n * @param {Object} options The map of various options that can be applied to the mapper\n * @param {Array} options.skipTypes The array of types that should not be converted\n *\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n * //=>{ first_name: 'Paul', age: 33 }\n */\nexport const convertChangeData = (\n  columns: Columns,\n  record: Record,\n  options: { skipTypes?: string[] } = {}\n): Record => {\n  const skipTypes = options.skipTypes ?? []\n\n  return Object.keys(record).reduce((acc, rec_key) => {\n    acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes)\n    return acc\n  }, {} as Record)\n}\n\n/**\n * Converts the value of an individual column.\n *\n * @param {String} columnName The column that you want to convert\n * @param {{name: String, type: String}[]} columns All of the columns\n * @param {Object} record The map of string values\n * @param {Array} skipTypes An array of types that should not be converted\n * @return {object} Useless information\n *\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n * //=> 33\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n * //=> \"33\"\n */\nexport const convertColumn = (\n  columnName: string,\n  columns: Columns,\n  record: Record,\n  skipTypes: string[]\n): RecordValue => {\n  const column = columns.find((x) => x.name === columnName)\n  const colType = column?.type\n  const value = record[columnName]\n\n  if (colType && !skipTypes.includes(colType)) {\n    return convertCell(colType, value)\n  }\n\n  return noop(value)\n}\n\n/**\n * If the value of the cell is `null`, returns null.\n * Otherwise converts the string value to the correct type.\n * @param {String} type A postgres column type\n * @param {String} stringValue The cell value\n *\n * @example convertCell('bool', 't')\n * //=> true\n * @example convertCell('int8', '10')\n * //=> 10\n * @example convertCell('_int4', '{1,2,3,4}')\n * //=> [1,2,3,4]\n */\nexport const convertCell = (type: string, value: RecordValue): RecordValue => {\n  // if data type is an array\n  if (type.charAt(0) === '_') {\n    const dataType = type.slice(1, type.length)\n    return toArray(value, dataType)\n  }\n\n  // If not null, convert to correct type.\n  switch (type) {\n    case PostgresTypes.bool:\n      return toBoolean(value)\n    case PostgresTypes.float4:\n    case PostgresTypes.float8:\n    case PostgresTypes.int2:\n    case PostgresTypes.int4:\n    case PostgresTypes.int8:\n    case PostgresTypes.numeric:\n    case PostgresTypes.oid:\n      return toNumber(value)\n    case PostgresTypes.json:\n    case PostgresTypes.jsonb:\n      return toJson(value)\n    case PostgresTypes.timestamp:\n      return toTimestampString(value) // Format to be consistent with PostgREST\n    case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n    case PostgresTypes.date: // To allow users to cast it based on Timezone\n    case PostgresTypes.daterange:\n    case PostgresTypes.int4range:\n    case PostgresTypes.int8range:\n    case PostgresTypes.money:\n    case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n    case PostgresTypes.text:\n    case PostgresTypes.time: // To allow users to cast it based on Timezone\n    case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n    case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n    case PostgresTypes.tsrange:\n    case PostgresTypes.tstzrange:\n      return noop(value)\n    default:\n      // Return the value for remaining types\n      return noop(value)\n  }\n}\n\nconst noop = (value: RecordValue): RecordValue => {\n  return value\n}\nexport const toBoolean = (value: RecordValue): RecordValue => {\n  switch (value) {\n    case 't':\n      return true\n    case 'f':\n      return false\n    default:\n      return value\n  }\n}\nexport const toNumber = (value: RecordValue): RecordValue => {\n  if (typeof value === 'string') {\n    const parsedValue = parseFloat(value)\n    if (!Number.isNaN(parsedValue)) {\n      return parsedValue\n    }\n  }\n  return value\n}\nexport const toJson = (value: RecordValue): RecordValue => {\n  if (typeof value === 'string') {\n    try {\n      return JSON.parse(value)\n    } catch (error) {\n      console.log(`JSON parse error: ${error}`)\n      return value\n    }\n  }\n  return value\n}\n\n/**\n * Converts a Postgres Array into a native JS array\n *\n * @example toArray('{}', 'int4')\n * //=> []\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n * @example toArray([1,2,3,4], 'int4')\n * //=> [1,2,3,4]\n */\nexport const toArray = (value: RecordValue, type: string): RecordValue => {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  const lastIdx = value.length - 1\n  const closeBrace = value[lastIdx]\n  const openBrace = value[0]\n\n  // Confirm value is a Postgres array by checking curly brackets\n  if (openBrace === '{' && closeBrace === '}') {\n    let arr\n    const valTrim = value.slice(1, lastIdx)\n\n    // TODO: find a better solution to separate Postgres array data\n    try {\n      arr = JSON.parse('[' + valTrim + ']')\n    } catch (_) {\n      // WARNING: splitting on comma does not cover all edge cases\n      arr = valTrim ? valTrim.split(',') : []\n    }\n\n    return arr.map((val: BaseValue) => convertCell(type, val))\n  }\n\n  return value\n}\n\n/**\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n * See https://github.com/supabase/supabase/issues/18\n *\n * @example toTimestampString('2019-09-10 00:00:00')\n * //=> '2019-09-10T00:00:00'\n */\nexport const toTimestampString = (value: RecordValue): RecordValue => {\n  if (typeof value === 'string') {\n    return value.replace(' ', 'T')\n  }\n\n  return value\n}\n"],"names":["PostgresTypes","abstime","bool","date","daterange","float4","float8","int2","int4","int4range","int8","int8range","json","jsonb","money","numeric","oid","reltime","text","time","timestamp","timestamptz","timetz","tsrange","tstzrange","convertChangeData","columns","record","options","skipTypes","Object","keys","reduce","acc","rec_key","convertColumn","columnName","column","find","x","name","colType","type","value","includes","convertCell","noop","charAt","dataType","slice","length","toArray","toBoolean","toNumber","toJson","toTimestampString","parsedValue","parseFloat","Number","isNaN","JSON","parse","error","console","log","lastIdx","closeBrace","openBrace","arr","valTrim","_","split","map","val","replace"],"mappings":"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"}