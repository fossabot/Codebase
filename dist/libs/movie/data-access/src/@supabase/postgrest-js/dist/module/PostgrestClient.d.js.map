{"version":3,"sources":["../../../../../../../../../libs/movie/data-access/node_modules/@supabase/postgrest-js/dist/module/PostgrestClient.d.ts"],"sourcesContent":["import PostgrestQueryBuilder from './lib/PostgrestQueryBuilder';\nimport PostgrestFilterBuilder from './lib/PostgrestFilterBuilder';\nimport { Fetch } from './lib/types';\nexport default class PostgrestClient {\n    url: string;\n    headers: {\n        [key: string]: string;\n    };\n    schema?: string;\n    fetch?: Fetch;\n    /**\n     * Creates a PostgREST client.\n     *\n     * @param url  URL of the PostgREST endpoint.\n     * @param headers  Custom headers.\n     * @param schema  Postgres schema to switch to.\n     */\n    constructor(url: string, { headers, schema, fetch, }?: {\n        headers?: {\n            [key: string]: string;\n        };\n        schema?: string;\n        fetch?: Fetch;\n    });\n    /**\n     * Authenticates the request with JWT.\n     *\n     * @param token  The JWT token to use.\n     */\n    auth(token: string): this;\n    /**\n     * Perform a table operation.\n     *\n     * @param table  The table name to operate on.\n     */\n    from<T = any>(table: string): PostgrestQueryBuilder<T>;\n    /**\n     * Perform a function call.\n     *\n     * @param fn  The function name to call.\n     * @param params  The parameters to pass to the function call.\n     * @param head  When set to true, no data will be returned.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n    rpc<T = any>(fn: string, params?: object, { head, count, }?: {\n        head?: boolean;\n        count?: null | 'exact' | 'planned' | 'estimated';\n    }): PostgrestFilterBuilder<T>;\n}\n//# sourceMappingURL=PostgrestClient.d.ts.map"],"names":["PostgrestClient"],"mappings":";;AAGe,GAAK,CAACA,eAAe,SAAfA,eAAe;CA8CpC,CAA6C,AAA7C,EAA6C,AAA7C,2CAA6C;;kBA9CxBA,eAAe"}