{"version":3,"sources":["../../../../../../../../../../libs/movie/data-access/node_modules/@supabase/postgrest-js/dist/main/lib/PostgrestQueryBuilder.d.ts"],"sourcesContent":["import { Fetch, PostgrestBuilder } from './types';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nexport default class PostgrestQueryBuilder<T> extends PostgrestBuilder<T> {\n    constructor(url: string, { headers, schema, fetch, }?: {\n        headers?: {\n            [key: string]: string;\n        };\n        schema?: string;\n        fetch?: Fetch;\n    });\n    /**\n     * Performs vertical filtering with SELECT.\n     *\n     * @param columns  The columns to retrieve, separated by commas.\n     * @param head  When set to true, select will void data.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n    select(columns?: string, { head, count, }?: {\n        head?: boolean;\n        count?: null | 'exact' | 'planned' | 'estimated';\n    }): PostgrestFilterBuilder<T>;\n    /**\n     * Performs an INSERT into the table.\n     *\n     * @param values  The values to insert.\n     * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n    insert(values: Partial<T> | Partial<T>[], options?: {\n        returning?: 'minimal' | 'representation';\n        count?: null | 'exact' | 'planned' | 'estimated';\n    }): PostgrestFilterBuilder<T>;\n    /**\n     * @deprecated Use `upsert()` instead.\n     */\n    insert(values: Partial<T> | Partial<T>[], options?: {\n        upsert?: boolean;\n        onConflict?: string;\n        returning?: 'minimal' | 'representation';\n        count?: null | 'exact' | 'planned' | 'estimated';\n    }): PostgrestFilterBuilder<T>;\n    /**\n     * Performs an UPSERT into the table.\n     *\n     * @param values  The values to insert.\n     * @param onConflict  By specifying the `on_conflict` query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint.\n     * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n     * @param count  Count algorithm to use to count rows in a table.\n     * @param ignoreDuplicates  Specifies if duplicate rows should be ignored and not inserted.\n     */\n    upsert(values: Partial<T> | Partial<T>[], { onConflict, returning, count, ignoreDuplicates, }?: {\n        onConflict?: string;\n        returning?: 'minimal' | 'representation';\n        count?: null | 'exact' | 'planned' | 'estimated';\n        ignoreDuplicates?: boolean;\n    }): PostgrestFilterBuilder<T>;\n    /**\n     * Performs an UPDATE on the table.\n     *\n     * @param values  The values to update.\n     * @param returning  By default the updated record is returned. Set this to 'minimal' if you don't need this value.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n    update(values: Partial<T>, { returning, count, }?: {\n        returning?: 'minimal' | 'representation';\n        count?: null | 'exact' | 'planned' | 'estimated';\n    }): PostgrestFilterBuilder<T>;\n    /**\n     * Performs a DELETE on the table.\n     *\n     * @param returning  If `true`, return the deleted row(s) in the response.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n    delete({ returning, count, }?: {\n        returning?: 'minimal' | 'representation';\n        count?: null | 'exact' | 'planned' | 'estimated';\n    }): PostgrestFilterBuilder<T>;\n}\n//# sourceMappingURL=PostgrestQueryBuilder.d.ts.map"],"names":["PostgrestQueryBuilder","PostgrestBuilder"],"mappings":";;AAAwC,GAAS,CAAT,MAAS;AAElC,GAAK,CAACA,qBAAqB,SAArBA,qBAAqB,SAAYC,MAAgB;CA4EtE,CAAmD,AAAnD,EAAmD,AAAnD,iDAAmD;;kBA5E9BD,qBAAqB"}