{"version":3,"sources":["../../../../../../../../../../libs/movie/data-access/node_modules/@supabase/postgrest-js/dist/main/lib/PostgrestQueryBuilder.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst types_1 = require(\"./types\");\nconst PostgrestFilterBuilder_1 = __importDefault(require(\"./PostgrestFilterBuilder\"));\nclass PostgrestQueryBuilder extends types_1.PostgrestBuilder {\n    constructor(url, { headers = {}, schema, fetch, } = {}) {\n        super({ fetch });\n        this.url = new URL(url);\n        this.headers = Object.assign({}, headers);\n        this.schema = schema;\n    }\n    /**\n     * Performs vertical filtering with SELECT.\n     *\n     * @param columns  The columns to retrieve, separated by commas.\n     * @param head  When set to true, select will void data.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n    select(columns = '*', { head = false, count = null, } = {}) {\n        this.method = 'GET';\n        // Remove whitespaces except when quoted\n        let quoted = false;\n        const cleanedColumns = columns\n            .split('')\n            .map((c) => {\n            if (/\\s/.test(c) && !quoted) {\n                return '';\n            }\n            if (c === '\"') {\n                quoted = !quoted;\n            }\n            return c;\n        })\n            .join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (count) {\n            this.headers['Prefer'] = `count=${count}`;\n        }\n        if (head) {\n            this.method = 'HEAD';\n        }\n        return new PostgrestFilterBuilder_1.default(this);\n    }\n    insert(values, { upsert = false, onConflict, returning = 'representation', count = null, } = {}) {\n        this.method = 'POST';\n        const prefersHeaders = [`return=${returning}`];\n        if (upsert)\n            prefersHeaders.push('resolution=merge-duplicates');\n        if (upsert && onConflict !== undefined)\n            this.url.searchParams.set('on_conflict', onConflict);\n        this.body = values;\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        if (Array.isArray(values)) {\n            const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n            if (columns.length > 0) {\n                const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`);\n                this.url.searchParams.set('columns', uniqueColumns.join(','));\n            }\n        }\n        return new PostgrestFilterBuilder_1.default(this);\n    }\n    /**\n     * Performs an UPSERT into the table.\n     *\n     * @param values  The values to insert.\n     * @param onConflict  By specifying the `on_conflict` query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint.\n     * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n     * @param count  Count algorithm to use to count rows in a table.\n     * @param ignoreDuplicates  Specifies if duplicate rows should be ignored and not inserted.\n     */\n    upsert(values, { onConflict, returning = 'representation', count = null, ignoreDuplicates = false, } = {}) {\n        this.method = 'POST';\n        const prefersHeaders = [\n            `resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`,\n            `return=${returning}`,\n        ];\n        if (onConflict !== undefined)\n            this.url.searchParams.set('on_conflict', onConflict);\n        this.body = values;\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder_1.default(this);\n    }\n    /**\n     * Performs an UPDATE on the table.\n     *\n     * @param values  The values to update.\n     * @param returning  By default the updated record is returned. Set this to 'minimal' if you don't need this value.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n    update(values, { returning = 'representation', count = null, } = {}) {\n        this.method = 'PATCH';\n        const prefersHeaders = [`return=${returning}`];\n        this.body = values;\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder_1.default(this);\n    }\n    /**\n     * Performs a DELETE on the table.\n     *\n     * @param returning  If `true`, return the deleted row(s) in the response.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n    delete({ returning = 'representation', count = null, } = {}) {\n        this.method = 'DELETE';\n        const prefersHeaders = [`return=${returning}`];\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder_1.default(this);\n    }\n}\nexports.default = PostgrestQueryBuilder;\n//# sourceMappingURL=PostgrestQueryBuilder.js.map"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","types_1","require","PostgrestFilterBuilder_1","PostgrestQueryBuilder","PostgrestBuilder","select","columns","head","count","method","quoted","cleanedColumns","split","map","c","test","join","url","searchParams","set","headers","default","insert","values","upsert","onConflict","returning","prefersHeaders","push","undefined","body","unshift","Array","isArray","reduce","acc","x","concat","keys","length","uniqueColumns","Set","column","ignoreDuplicates","update","delete","schema","fetch","URL","assign"],"mappings":"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"}