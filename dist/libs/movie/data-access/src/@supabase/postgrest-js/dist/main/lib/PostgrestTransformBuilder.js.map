{"version":3,"sources":["../../../../../../../../../../libs/movie/data-access/node_modules/@supabase/postgrest-js/dist/main/lib/PostgrestTransformBuilder.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst types_1 = require(\"./types\");\n/**\n * Post-filters (transforms)\n */\nclass PostgrestTransformBuilder extends types_1.PostgrestBuilder {\n    /**\n     * Performs vertical filtering with SELECT.\n     *\n     * @param columns  The columns to retrieve, separated by commas.\n     */\n    select(columns = '*') {\n        // Remove whitespaces except when quoted\n        let quoted = false;\n        const cleanedColumns = columns\n            .split('')\n            .map((c) => {\n            if (/\\s/.test(c) && !quoted) {\n                return '';\n            }\n            if (c === '\"') {\n                quoted = !quoted;\n            }\n            return c;\n        })\n            .join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        return this;\n    }\n    /**\n     * Orders the result with the specified `column`.\n     *\n     * @param column  The column to order on.\n     * @param ascending  If `true`, the result will be in ascending order.\n     * @param nullsFirst  If `true`, `null`s appear first.\n     * @param foreignTable  The foreign table to use (if `column` is a foreign column).\n     */\n    order(column, { ascending = true, nullsFirst = false, foreignTable, } = {}) {\n        const key = typeof foreignTable === 'undefined' ? 'order' : `${foreignTable}.order`;\n        const existingOrder = this.url.searchParams.get(key);\n        this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}.${nullsFirst ? 'nullsfirst' : 'nullslast'}`);\n        return this;\n    }\n    /**\n     * Limits the result with the specified `count`.\n     *\n     * @param count  The maximum no. of rows to limit to.\n     * @param foreignTable  The foreign table to use (for foreign columns).\n     */\n    limit(count, { foreignTable } = {}) {\n        const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n        this.url.searchParams.set(key, `${count}`);\n        return this;\n    }\n    /**\n     * Limits the result to rows within the specified range, inclusive.\n     *\n     * @param from  The starting index from which to limit the result, inclusive.\n     * @param to  The last index to which to limit the result, inclusive.\n     * @param foreignTable  The foreign table to use (for foreign columns).\n     */\n    range(from, to, { foreignTable } = {}) {\n        const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`;\n        const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n        this.url.searchParams.set(keyOffset, `${from}`);\n        // Range is inclusive, so add 1\n        this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n        return this;\n    }\n    /**\n     * Sets the AbortSignal for the fetch request.\n     */\n    abortSignal(signal) {\n        this.signal = signal;\n        return this;\n    }\n    /**\n     * Retrieves only one row from the result. Result must be one row (e.g. using\n     * `limit`), otherwise this will result in an error.\n     */\n    single() {\n        this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        return this;\n    }\n    /**\n     * Retrieves at most one row from the result. Result must be at most one row\n     * (e.g. using `eq` on a UNIQUE column), otherwise this will result in an\n     * error.\n     */\n    maybeSingle() {\n        this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        const _this = new PostgrestTransformBuilder(this);\n        _this.then = ((onfulfilled, onrejected) => this.then((res) => {\n            var _a, _b;\n            if ((_b = (_a = res.error) === null || _a === void 0 ? void 0 : _a.details) === null || _b === void 0 ? void 0 : _b.includes('Results contain 0 rows')) {\n                return onfulfilled({\n                    error: null,\n                    data: null,\n                    count: res.count,\n                    status: 200,\n                    statusText: 'OK',\n                    body: null,\n                });\n            }\n            return onfulfilled(res);\n        }, onrejected));\n        return _this;\n    }\n    /**\n     * Set the response type to CSV.\n     */\n    csv() {\n        this.headers['Accept'] = 'text/csv';\n        return this;\n    }\n}\nexports.default = PostgrestTransformBuilder;\n//# sourceMappingURL=PostgrestTransformBuilder.js.map"],"names":["Object","defineProperty","exports","value","types_1","require","PostgrestTransformBuilder","PostgrestBuilder","select","columns","quoted","cleanedColumns","split","map","c","test","join","url","searchParams","set","order","column","ascending","nullsFirst","foreignTable","key","existingOrder","get","limit","count","range","from","to","keyOffset","keyLimit","abortSignal","signal","single","headers","maybeSingle","_this","then","onfulfilled","onrejected","res","_a","_b","error","details","includes","data","status","statusText","body","csv","default"],"mappings":"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"}