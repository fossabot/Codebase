{"version":3,"sources":["../../../../../../../../../../libs/movie/data-access/node_modules/@supabase/postgrest-js/dist/main/lib/PostgrestTransformBuilder.d.ts"],"sourcesContent":["import { PostgrestBuilder, PostgrestMaybeSingleResponse, PostgrestSingleResponse } from './types';\n/**\n * Post-filters (transforms)\n */\nexport default class PostgrestTransformBuilder<T> extends PostgrestBuilder<T> {\n    /**\n     * Performs vertical filtering with SELECT.\n     *\n     * @param columns  The columns to retrieve, separated by commas.\n     */\n    select(columns?: string): this;\n    /**\n     * Orders the result with the specified `column`.\n     *\n     * @param column  The column to order on.\n     * @param ascending  If `true`, the result will be in ascending order.\n     * @param nullsFirst  If `true`, `null`s appear first.\n     * @param foreignTable  The foreign table to use (if `column` is a foreign column).\n     */\n    order(column: keyof T, { ascending, nullsFirst, foreignTable, }?: {\n        ascending?: boolean;\n        nullsFirst?: boolean;\n        foreignTable?: string;\n    }): this;\n    /**\n     * Limits the result with the specified `count`.\n     *\n     * @param count  The maximum no. of rows to limit to.\n     * @param foreignTable  The foreign table to use (for foreign columns).\n     */\n    limit(count: number, { foreignTable }?: {\n        foreignTable?: string;\n    }): this;\n    /**\n     * Limits the result to rows within the specified range, inclusive.\n     *\n     * @param from  The starting index from which to limit the result, inclusive.\n     * @param to  The last index to which to limit the result, inclusive.\n     * @param foreignTable  The foreign table to use (for foreign columns).\n     */\n    range(from: number, to: number, { foreignTable }?: {\n        foreignTable?: string;\n    }): this;\n    /**\n     * Sets the AbortSignal for the fetch request.\n     */\n    abortSignal(signal: AbortSignal): this;\n    /**\n     * Retrieves only one row from the result. Result must be one row (e.g. using\n     * `limit`), otherwise this will result in an error.\n     */\n    single(): PromiseLike<PostgrestSingleResponse<T>>;\n    /**\n     * Retrieves at most one row from the result. Result must be at most one row\n     * (e.g. using `eq` on a UNIQUE column), otherwise this will result in an\n     * error.\n     */\n    maybeSingle(): PromiseLike<PostgrestMaybeSingleResponse<T>>;\n    /**\n     * Set the response type to CSV.\n     */\n    csv(): PromiseLike<PostgrestSingleResponse<string>>;\n}\n//# sourceMappingURL=PostgrestTransformBuilder.d.ts.map"],"names":["PostgrestTransformBuilder","PostgrestBuilder"],"mappings":";;AAAwF,GAAS,CAAT,MAAS;AAIlF,GAAK,CAACA,yBAAyB,SAAzBA,yBAAyB,SAAYC,MAAgB;CA2D1E,CAAuD,AAAvD,EAAuD,AAAvD,qDAAuD;;kBA3DlCD,yBAAyB"}