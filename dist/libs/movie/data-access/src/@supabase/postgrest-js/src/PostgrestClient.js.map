{"version":3,"sources":["../../../../../../../../libs/movie/data-access/node_modules/@supabase/postgrest-js/src/PostgrestClient.ts"],"sourcesContent":["import PostgrestQueryBuilder from './lib/PostgrestQueryBuilder'\nimport PostgrestRpcBuilder from './lib/PostgrestRpcBuilder'\nimport PostgrestFilterBuilder from './lib/PostgrestFilterBuilder'\nimport { DEFAULT_HEADERS } from './lib/constants'\nimport { Fetch } from './lib/types'\n\nexport default class PostgrestClient {\n  url: string\n  headers: { [key: string]: string }\n  schema?: string\n  fetch?: Fetch\n\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url  URL of the PostgREST endpoint.\n   * @param headers  Custom headers.\n   * @param schema  Postgres schema to switch to.\n   */\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      fetch,\n    }: { headers?: { [key: string]: string }; schema?: string; fetch?: Fetch } = {}\n  ) {\n    this.url = url\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.schema = schema\n    this.fetch = fetch\n  }\n\n  /**\n   * Authenticates the request with JWT.\n   *\n   * @param token  The JWT token to use.\n   */\n  auth(token: string): this {\n    this.headers['Authorization'] = `Bearer ${token}`\n    return this\n  }\n\n  /**\n   * Perform a table operation.\n   *\n   * @param table  The table name to operate on.\n   */\n  from<T = any>(table: string): PostgrestQueryBuilder<T> {\n    const url = `${this.url}/${table}`\n    return new PostgrestQueryBuilder<T>(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n    })\n  }\n\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param params  The parameters to pass to the function call.\n   * @param head  When set to true, no data will be returned.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  rpc<T = any>(\n    fn: string,\n    params?: object,\n    {\n      head = false,\n      count = null,\n    }: {\n      head?: boolean\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    const url = `${this.url}/rpc/${fn}`\n    return new PostgrestRpcBuilder<T>(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n    }).rpc(params, { head, count })\n  }\n}\n"],"names":["PostgrestClient","auth","token","headers","from","table","url","PostgrestQueryBuilder","schema","fetch","rpc","fn","params","head","count","PostgrestRpcBuilder","DEFAULT_HEADERS"],"mappings":";;;AAAkC,GAA6B,CAA7B,sBAA6B;AAC/B,GAA2B,CAA3B,oBAA2B;AAE3B,GAAiB,CAAjB,UAAiB;AAGlC,GAAK,CAACA,eAAe,SAAfA,eAAe;IA2BlC,EAIG,AAJH;;;;GAIG,AAJH,EAIG,CACHC,IAAI,CAACC,KAAa,EAAQ,CAAC;QACzB,IAAI,CAACC,OAAO,CAAC,CAAe,mBAAK,OAAO,EAAED,KAAK;QAC/C,MAAM,CAAC,IAAI;IACb,CAAC;IAED,EAIG,AAJH;;;;GAIG,AAJH,EAIG,CACHE,IAAI,CAAUC,KAAa,EAA4B,CAAC;QACtD,KAAK,CAACC,GAAG,MAAM,IAAI,CAACA,GAAG,CAAC,CAAC,EAAED,KAAK;QAChC,MAAM,CAAC,GAAG,CAACE,sBAAqB,SAAID,GAAG,EAAE,CAAC;YACxCH,OAAO,EAAE,IAAI,CAACA,OAAO;YACrBK,MAAM,EAAE,IAAI,CAACA,MAAM;YACnBC,KAAK,EAAE,IAAI,CAACA,KAAK;QACnB,CAAC;IACH,CAAC;IAED,EAOG,AAPH;;;;;;;GAOG,AAPH,EAOG,CACHC,GAAG,CACDC,EAAU,EACVC,MAAe,EACf,CAAC,CACCC,IAAI,EAAG,KAAK,GACZC,KAAK,EAAG,IAAI,EAId,CAAC,GAAG,CAAC,CAAC,EACqB,CAAC;QAC5B,KAAK,CAACR,GAAG,MAAM,IAAI,CAACA,GAAG,CAAC,KAAK,EAAEK,EAAE;QACjC,MAAM,CAAC,GAAG,CAACI,oBAAmB,SAAIT,GAAG,EAAE,CAAC;YACtCH,OAAO,EAAE,IAAI,CAACA,OAAO;YACrBK,MAAM,EAAE,IAAI,CAACA,MAAM;YACnBC,KAAK,EAAE,IAAI,CAACA,KAAK;QACnB,CAAC,EAAEC,GAAG,CAACE,MAAM,EAAE,CAAC;YAACC,IAAI;YAAEC,KAAK;QAAC,CAAC;IAChC,CAAC;IAtED,EAMG,AANH;;;;;;GAMG,AANH,EAMG,aAEDR,GAAW,EACX,CAAC,CACCH,OAAO,EAAG,CAAC,CAAC,GACZK,MAAM,GACNC,KAAK,EACkE,CAAC,GAAG,CAAC,CAAC,CAC/E,CAAC;QACD,IAAI,CAACH,GAAG,GAAGA,GAAG;QACd,IAAI,CAACH,OAAO,+BAAQa,UAAe,kBAAKb,OAAO;QAC/C,IAAI,CAACK,MAAM,GAAGA,MAAM;QACpB,IAAI,CAACC,KAAK,GAAGA,KAAK;IACpB,CAAC;;kBAzBkBT,eAAe"}