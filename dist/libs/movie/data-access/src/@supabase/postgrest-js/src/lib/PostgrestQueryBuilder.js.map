{"version":3,"sources":["../../../../../../../../../libs/movie/data-access/node_modules/@supabase/postgrest-js/src/lib/PostgrestQueryBuilder.ts"],"sourcesContent":["import { Fetch, PostgrestBuilder } from './types'\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\n\nexport default class PostgrestQueryBuilder<T> extends PostgrestBuilder<T> {\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      fetch,\n    }: { headers?: { [key: string]: string }; schema?: string; fetch?: Fetch } = {}\n  ) {\n    super(({ fetch } as unknown) as PostgrestBuilder<T>)\n    this.url = new URL(url)\n    this.headers = { ...headers }\n    this.schema = schema\n  }\n\n  /**\n   * Performs vertical filtering with SELECT.\n   *\n   * @param columns  The columns to retrieve, separated by commas.\n   * @param head  When set to true, select will void data.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  select(\n    columns = '*',\n    {\n      head = false,\n      count = null,\n    }: {\n      head?: boolean\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    this.method = 'GET'\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = columns\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n    if (count) {\n      this.headers['Prefer'] = `count=${count}`\n    }\n    if (head) {\n      this.method = 'HEAD'\n    }\n    return new PostgrestFilterBuilder(this)\n  }\n\n  /**\n   * Performs an INSERT into the table.\n   *\n   * @param values  The values to insert.\n   * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  insert(\n    values: Partial<T> | Partial<T>[],\n    options?: {\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n    }\n  ): PostgrestFilterBuilder<T>\n  /**\n   * @deprecated Use `upsert()` instead.\n   */\n  insert(\n    values: Partial<T> | Partial<T>[],\n    options?: {\n      upsert?: boolean\n      onConflict?: string\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n    }\n  ): PostgrestFilterBuilder<T>\n  insert(\n    values: Partial<T> | Partial<T>[],\n    {\n      upsert = false,\n      onConflict,\n      returning = 'representation',\n      count = null,\n    }: {\n      upsert?: boolean\n      onConflict?: string\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    this.method = 'POST'\n\n    const prefersHeaders = [`return=${returning}`]\n    if (upsert) prefersHeaders.push('resolution=merge-duplicates')\n\n    if (upsert && onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict)\n    this.body = values\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), [] as string[])\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`)\n        this.url.searchParams.set('columns', uniqueColumns.join(','))\n      }\n    }\n\n    return new PostgrestFilterBuilder(this)\n  }\n\n  /**\n   * Performs an UPSERT into the table.\n   *\n   * @param values  The values to insert.\n   * @param onConflict  By specifying the `on_conflict` query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint.\n   * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   * @param ignoreDuplicates  Specifies if duplicate rows should be ignored and not inserted.\n   */\n  upsert(\n    values: Partial<T> | Partial<T>[],\n    {\n      onConflict,\n      returning = 'representation',\n      count = null,\n      ignoreDuplicates = false,\n    }: {\n      onConflict?: string\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n      ignoreDuplicates?: boolean\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    this.method = 'POST'\n\n    const prefersHeaders = [\n      `resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`,\n      `return=${returning}`,\n    ]\n\n    if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict)\n    this.body = values\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    return new PostgrestFilterBuilder(this)\n  }\n\n  /**\n   * Performs an UPDATE on the table.\n   *\n   * @param values  The values to update.\n   * @param returning  By default the updated record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  update(\n    values: Partial<T>,\n    {\n      returning = 'representation',\n      count = null,\n    }: {\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    this.method = 'PATCH'\n    const prefersHeaders = [`return=${returning}`]\n    this.body = values\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n    return new PostgrestFilterBuilder(this)\n  }\n\n  /**\n   * Performs a DELETE on the table.\n   *\n   * @param returning  If `true`, return the deleted row(s) in the response.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  delete({\n    returning = 'representation',\n    count = null,\n  }: {\n    returning?: 'minimal' | 'representation'\n    count?: null | 'exact' | 'planned' | 'estimated'\n  } = {}): PostgrestFilterBuilder<T> {\n    this.method = 'DELETE'\n    const prefersHeaders = [`return=${returning}`]\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n    return new PostgrestFilterBuilder(this)\n  }\n}\n"],"names":["PostgrestQueryBuilder","PostgrestBuilder","select","columns","head","count","method","quoted","cleanedColumns","split","map","c","test","join","url","searchParams","set","headers","PostgrestFilterBuilder","insert","values","upsert","onConflict","returning","prefersHeaders","push","undefined","body","unshift","Array","isArray","reduce","acc","x","concat","Object","keys","length","uniqueColumns","Set","column","ignoreDuplicates","update","delete","schema","fetch","URL"],"mappings":"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"}