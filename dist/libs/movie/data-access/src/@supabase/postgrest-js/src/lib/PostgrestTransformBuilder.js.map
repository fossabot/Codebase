{"version":3,"sources":["../../../../../../../../../libs/movie/data-access/node_modules/@supabase/postgrest-js/src/lib/PostgrestTransformBuilder.ts"],"sourcesContent":["import { PostgrestBuilder, PostgrestMaybeSingleResponse, PostgrestSingleResponse } from './types'\n\n/**\n * Post-filters (transforms)\n */\n\nexport default class PostgrestTransformBuilder<T> extends PostgrestBuilder<T> {\n  /**\n   * Performs vertical filtering with SELECT.\n   *\n   * @param columns  The columns to retrieve, separated by commas.\n   */\n  select(columns = '*'): this {\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = columns\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n    return this\n  }\n\n  /**\n   * Orders the result with the specified `column`.\n   *\n   * @param column  The column to order on.\n   * @param ascending  If `true`, the result will be in ascending order.\n   * @param nullsFirst  If `true`, `null`s appear first.\n   * @param foreignTable  The foreign table to use (if `column` is a foreign column).\n   */\n  order(\n    column: keyof T,\n    {\n      ascending = true,\n      nullsFirst = false,\n      foreignTable,\n    }: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: string } = {}\n  ): this {\n    const key = typeof foreignTable === 'undefined' ? 'order' : `${foreignTable}.order`\n    const existingOrder = this.url.searchParams.get(key)\n\n    this.url.searchParams.set(\n      key,\n      `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}.${\n        nullsFirst ? 'nullsfirst' : 'nullslast'\n      }`\n    )\n    return this\n  }\n\n  /**\n   * Limits the result with the specified `count`.\n   *\n   * @param count  The maximum no. of rows to limit to.\n   * @param foreignTable  The foreign table to use (for foreign columns).\n   */\n  limit(count: number, { foreignTable }: { foreignTable?: string } = {}): this {\n    const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\n    this.url.searchParams.set(key, `${count}`)\n    return this\n  }\n\n  /**\n   * Limits the result to rows within the specified range, inclusive.\n   *\n   * @param from  The starting index from which to limit the result, inclusive.\n   * @param to  The last index to which to limit the result, inclusive.\n   * @param foreignTable  The foreign table to use (for foreign columns).\n   */\n  range(from: number, to: number, { foreignTable }: { foreignTable?: string } = {}): this {\n    const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`\n    const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\n    this.url.searchParams.set(keyOffset, `${from}`)\n    // Range is inclusive, so add 1\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`)\n    return this\n  }\n\n  /**\n   * Sets the AbortSignal for the fetch request.\n   */\n  abortSignal(signal: AbortSignal): this {\n    this.signal = signal\n    return this\n  }\n\n  /**\n   * Retrieves only one row from the result. Result must be one row (e.g. using\n   * `limit`), otherwise this will result in an error.\n   */\n  single(): PromiseLike<PostgrestSingleResponse<T>> {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\n    return this as PromiseLike<PostgrestSingleResponse<T>>\n  }\n\n  /**\n   * Retrieves at most one row from the result. Result must be at most one row\n   * (e.g. using `eq` on a UNIQUE column), otherwise this will result in an\n   * error.\n   */\n  maybeSingle(): PromiseLike<PostgrestMaybeSingleResponse<T>> {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\n    const _this = new PostgrestTransformBuilder(this)\n    _this.then = ((onfulfilled: any, onrejected: any) =>\n      this.then((res: any): any => {\n        if (res.error?.details?.includes('Results contain 0 rows')) {\n          return onfulfilled({\n            error: null,\n            data: null,\n            count: res.count,\n            status: 200,\n            statusText: 'OK',\n            body: null,\n          })\n        }\n\n        return onfulfilled(res)\n      }, onrejected)) as any\n    return _this as PromiseLike<PostgrestMaybeSingleResponse<T>>\n  }\n\n  /**\n   * Set the response type to CSV.\n   */\n  csv(): PromiseLike<PostgrestSingleResponse<string>> {\n    this.headers['Accept'] = 'text/csv'\n    return this as PromiseLike<PostgrestSingleResponse<string>>\n  }\n}\n"],"names":["PostgrestTransformBuilder","PostgrestBuilder","select","columns","quoted","cleanedColumns","split","map","c","test","join","url","searchParams","set","order","column","ascending","nullsFirst","foreignTable","key","existingOrder","get","limit","count","range","from","to","keyOffset","keyLimit","abortSignal","signal","single","headers","maybeSingle","_this","then","onfulfilled","onrejected","res","error","details","includes","data","status","statusText","body","csv"],"mappings":"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"}