{"version":3,"sources":["../../../../../../../../../libs/movie/data-access/node_modules/@supabase/postgrest-js/src/lib/types.ts"],"sourcesContent":["import crossFetch from 'cross-fetch'\n\nexport type Fetch = typeof fetch\n\n/**\n * Error format\n *\n * {@link https://postgrest.org/en/stable/api.html?highlight=options#errors-and-http-status-codes}\n */\nexport type PostgrestError = {\n  message: string\n  details: string\n  hint: string\n  code: string\n}\n\n/**\n * Response format\n *\n * {@link https://github.com/supabase/supabase-js/issues/32}\n */\ninterface PostgrestResponseBase {\n  status: number\n  statusText: string\n}\n\ninterface PostgrestResponseSuccess<T> extends PostgrestResponseBase {\n  error: null\n  data: T[]\n  body: T[]\n  count: number | null\n}\ninterface PostgrestResponseFailure extends PostgrestResponseBase {\n  error: PostgrestError\n  data: null\n  // For backward compatibility: body === data\n  body: null\n  count: null\n}\nexport type PostgrestResponse<T> = PostgrestResponseSuccess<T> | PostgrestResponseFailure\n\ninterface PostgrestSingleResponseSuccess<T> extends PostgrestResponseBase {\n  error: null\n  data: T\n  // For backward compatibility: body === data\n  body: T\n}\nexport type PostgrestSingleResponse<T> =\n  | PostgrestSingleResponseSuccess<T>\n  | PostgrestResponseFailure\nexport type PostgrestMaybeSingleResponse<T> = PostgrestSingleResponse<T | null>\n\nexport abstract class PostgrestBuilder<T> implements PromiseLike<PostgrestResponse<T>> {\n  protected method!: 'GET' | 'HEAD' | 'POST' | 'PATCH' | 'DELETE'\n  protected url!: URL\n  protected headers!: { [key: string]: string }\n  protected schema?: string\n  protected body?: Partial<T> | Partial<T>[]\n  protected shouldThrowOnError = false\n  protected signal?: AbortSignal\n  protected fetch: Fetch\n\n  constructor(builder: PostgrestBuilder<T>) {\n    Object.assign(this, builder)\n    this.fetch = builder.fetch || crossFetch\n  }\n\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n  throwOnError(): PostgrestBuilder<T> {\n    this.shouldThrowOnError = true\n    return this\n  }\n\n  then<TResult1 = PostgrestResponse<T>, TResult2 = never>(\n    onfulfilled?:\n      | ((value: PostgrestResponse<T>) => TResult1 | PromiseLike<TResult1>)\n      | undefined\n      | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): PromiseLike<TResult1 | TResult2> {\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (typeof this.schema === 'undefined') {\n      // skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers['Accept-Profile'] = this.schema\n    } else {\n      this.headers['Content-Profile'] = this.schema\n    }\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers['Content-Type'] = 'application/json'\n    }\n\n    let res = this.fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal,\n    }).then(async (res) => {\n      let error = null\n      let data = null\n      let count = null\n\n      if (res.ok) {\n        const isReturnMinimal = this.headers['Prefer']?.split(',').includes('return=minimal')\n        if (this.method !== 'HEAD' && !isReturnMinimal) {\n          const text = await res.text()\n          if (!text) {\n            // discard `text`\n          } else if (this.headers['Accept'] === 'text/csv') {\n            data = text\n          } else {\n            data = JSON.parse(text)\n          }\n        }\n\n        const countHeader = this.headers['Prefer']?.match(/count=(exact|planned|estimated)/)\n        const contentRange = res.headers.get('content-range')?.split('/')\n        if (countHeader && contentRange && contentRange.length > 1) {\n          count = parseInt(contentRange[1])\n        }\n      } else {\n        const body = await res.text()\n\n        try {\n          error = JSON.parse(body)\n        } catch {\n          error = {\n            message: body,\n          }\n        }\n\n        if (error && this.shouldThrowOnError) {\n          throw error\n        }\n      }\n\n      const postgrestResponse = {\n        error,\n        data,\n        count,\n        status: res.status,\n        statusText: res.statusText,\n        body: data,\n      }\n\n      return postgrestResponse\n    })\n    if (!this.shouldThrowOnError) {\n      res = res.catch((fetchError) => ({\n        error: {\n          message: `FetchError: ${fetchError.message}`,\n          details: '',\n          hint: '',\n          code: fetchError.code || '',\n        },\n        data: null,\n        body: null,\n        count: null,\n        status: 400,\n        statusText: 'Bad Request',\n      }))\n    }\n\n    return res.then(onfulfilled, onrejected)\n  }\n}\n"],"names":["PostgrestBuilder","throwOnError","shouldThrowOnError","then","onfulfilled","onrejected","schema","includes","method","headers","res","fetch","url","toString","body","JSON","stringify","signal","error","data","count","ok","isReturnMinimal","split","text","parse","countHeader","match","contentRange","get","length","parseInt","message","postgrestResponse","status","statusText","catch","fetchError","details","hint","code","builder","Object","assign","crossFetch"],"mappings":";AAAuB,GAAa,CAAb,WAAa;AAoD7B,GAAQ,CAAOA,gBAAgB,SAAhBA,gBAAgB;IAepC,EAKG,AALH;;;;;GAKG,AALH,EAKG,CACHC,YAAY,GAAwB,CAAC;QACnC,IAAI,CAACC,kBAAkB,GAAG,IAAI;QAC9B,MAAM,CAAC,IAAI;IACb,CAAC;IAEDC,IAAI,CACFC,WAGQ,EACRC,UAAmF,EACjD,CAAC;QACnC,EAA6D,AAA7D,2DAA6D;QAC7D,EAAE,EAAE,MAAM,CAAC,IAAI,CAACC,MAAM,KAAK,CAAW,YAAE,CAAC;QACvC,EAAO,AAAP,KAAO;QACT,CAAC,MAAM,EAAE,EAAE,CAAC;YAAA,CAAK;YAAE,CAAM;QAAA,CAAC,CAACC,QAAQ,CAAC,IAAI,CAACC,MAAM,GAAG,CAAC;YACjD,IAAI,CAACC,OAAO,CAAC,CAAgB,mBAAI,IAAI,CAACH,MAAM;QAC9C,CAAC,MAAM,CAAC;YACN,IAAI,CAACG,OAAO,CAAC,CAAiB,oBAAI,IAAI,CAACH,MAAM;QAC/C,CAAC;QACD,EAAE,EAAE,IAAI,CAACE,MAAM,KAAK,CAAK,QAAI,IAAI,CAACA,MAAM,KAAK,CAAM,OAAE,CAAC;YACpD,IAAI,CAACC,OAAO,CAAC,CAAc,iBAAI,CAAkB;QACnD,CAAC;QAED,GAAG,CAACC,IAAG,GAAG,IAAI,CAACC,KAAK,CAAC,IAAI,CAACC,GAAG,CAACC,QAAQ,IAAI,CAAC;YACzCL,MAAM,EAAE,IAAI,CAACA,MAAM;YACnBC,OAAO,EAAE,IAAI,CAACA,OAAO;YACrBK,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACF,IAAI;YAC9BG,MAAM,EAAE,IAAI,CAACA,MAAM;QACrB,CAAC,EAAEd,IAAI,QAAQO,GAAG,GAAK,CAAC;YACtB,GAAG,CAACQ,KAAK,GAAG,IAAI;YAChB,GAAG,CAACC,IAAI,GAAG,IAAI;YACf,GAAG,CAACC,KAAK,GAAG,IAAI;YAEhB,EAAE,EAAEV,GAAG,CAACW,EAAE,EAAE,CAAC;oBACa,GAAsB,EAY1B,IAAsB,EACrBX,IAAgC;gBAbrD,KAAK,CAACY,eAAe,IAAG,GAAsB,GAAtB,IAAI,CAACb,OAAO,CAAC,CAAQ,sBAArB,GAAsB,KAAtB,IAAI,CAAJ,CAA6B,GAA7B,IAAI,CAAJ,CAA6B,GAA7B,GAAsB,CAAEc,KAAK,CAAC,CAAG,IAAEhB,QAAQ,CAAC,CAAgB;gBACpF,EAAE,EAAE,IAAI,CAACC,MAAM,KAAK,CAAM,UAAKc,eAAe,EAAE,CAAC;oBAC/C,KAAK,CAACE,IAAI,GAAG,KAAK,CAACd,GAAG,CAACc,IAAI;oBAC3B,EAAE,GAAGA,IAAI,EAAE,CAAC;oBACV,EAAiB,AAAjB,eAAiB;oBACnB,CAAC,MAAM,EAAE,EAAE,IAAI,CAACf,OAAO,CAAC,CAAQ,aAAM,CAAU,WAAE,CAAC;wBACjDU,IAAI,GAAGK,IAAI;oBACb,CAAC,MAAM,CAAC;wBACNL,IAAI,GAAGJ,IAAI,CAACU,KAAK,CAACD,IAAI;oBACxB,CAAC;gBACH,CAAC;gBAED,KAAK,CAACE,WAAW,IAAG,IAAsB,GAAtB,IAAI,CAACjB,OAAO,CAAC,CAAQ,sBAArB,IAAsB,KAAtB,IAAI,CAAJ,CAA6B,GAA7B,IAAI,CAAJ,CAA6B,GAA7B,IAAsB,CAAEkB,KAAK;gBACjD,KAAK,CAACC,YAAY,IAAGlB,IAAgC,GAAhCA,GAAG,CAACD,OAAO,CAACoB,GAAG,CAAC,CAAe,6BAA/BnB,IAAgC,KAAhCA,IAAID,CAAJC,CAAuC,GAAvCA,IAAID,CAAJC,CAAuC,GAAvCA,IAAgC,CAAEa,KAAK,CAAC,CAAG;gBAChE,EAAE,EAAEG,WAAW,IAAIE,YAAY,IAAIA,YAAY,CAACE,MAAM,GAAG,CAAC,EAAE,CAAC;oBAC3DV,KAAK,GAAGW,QAAQ,CAACH,YAAY,CAAC,CAAC;gBACjC,CAAC;YACH,CAAC,MAAM,CAAC;gBACN,KAAK,CAACd,IAAI,GAAG,KAAK,CAACJ,GAAG,CAACc,IAAI;gBAE3B,GAAG,CAAC,CAAC;oBACHN,KAAK,GAAGH,IAAI,CAACU,KAAK,CAACX,IAAI;gBACzB,CAAC,CAAC,KAAK,KAAC,CAAC;oBACPI,KAAK,GAAG,CAAC;wBACPc,OAAO,EAAElB,IAAI;oBACf,CAAC;gBACH,CAAC;gBAED,EAAE,EAAEI,KAAK,IAAI,IAAI,CAAChB,kBAAkB,EAAE,CAAC;oBACrC,KAAK,CAACgB,KAAK;gBACb,CAAC;YACH,CAAC;YAED,KAAK,CAACe,iBAAiB,GAAG,CAAC;gBACzBf,KAAK;gBACLC,IAAI;gBACJC,KAAK;gBACLc,MAAM,EAAExB,GAAG,CAACwB,MAAM;gBAClBC,UAAU,EAAEzB,GAAG,CAACyB,UAAU;gBAC1BrB,IAAI,EAAEK,IAAI;YACZ,CAAC;YAED,MAAM,CAACc,iBAAiB;QAC1B,CAAC;QACD,EAAE,GAAG,IAAI,CAAC/B,kBAAkB,EAAE,CAAC;YAC7BQ,IAAG,GAAGA,IAAG,CAAC0B,KAAK,EAAEC,UAAU,IAAM,CAAC;oBAChCnB,KAAK,EAAE,CAAC;wBACNc,OAAO,GAAG,YAAY,EAAEK,UAAU,CAACL,OAAO;wBAC1CM,OAAO,EAAE,CAAE;wBACXC,IAAI,EAAE,CAAE;wBACRC,IAAI,EAAEH,UAAU,CAACG,IAAI,IAAI,CAAE;oBAC7B,CAAC;oBACDrB,IAAI,EAAE,IAAI;oBACVL,IAAI,EAAE,IAAI;oBACVM,KAAK,EAAE,IAAI;oBACXc,MAAM,EAAE,GAAG;oBACXC,UAAU,EAAE,CAAa;gBAC3B,CAAC;;QACH,CAAC;QAED,MAAM,CAACzB,IAAG,CAACP,IAAI,CAACC,WAAW,EAAEC,UAAU;IACzC,CAAC;gBA3GWoC,OAA4B,CAAE,CAAC;QAVtC,IAsHN,CAhHWvC,kBAAkB,GAAG,KAAK;QAKlCwC,MAAM,CAACC,MAAM,CAAC,IAAI,EAAEF,OAAO;QAC3B,IAAI,CAAC9B,KAAK,GAAG8B,OAAO,CAAC9B,KAAK,IAAIiC,WAAU;IAC1C,CAAC;;QAbmB5C,gBAAgB,GAAhBA,gBAAgB"}