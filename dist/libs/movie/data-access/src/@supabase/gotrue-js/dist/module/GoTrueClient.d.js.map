{"version":3,"sources":["../../../../../../../../../libs/movie/data-access/node_modules/@supabase/gotrue-js/dist/module/GoTrueClient.d.ts"],"sourcesContent":["import GoTrueApi from './GoTrueApi';\nimport { Fetch } from './lib/fetch';\nimport type { ApiError, Session, User, UserAttributes, Provider, Subscription, AuthChangeEvent, CookieOptions, UserCredentials, VerifyOTPParams } from './lib/types';\ndeclare type AnyFunction = (...args: any[]) => any;\ndeclare type MaybePromisify<T> = T | Promise<T>;\ndeclare type PromisifyMethods<T> = {\n    [K in keyof T]: T[K] extends AnyFunction ? (...args: Parameters<T[K]>) => MaybePromisify<ReturnType<T[K]>> : T[K];\n};\ndeclare type SupportedStorage = PromisifyMethods<Pick<Storage, 'getItem' | 'setItem' | 'removeItem'>>;\nexport default class GoTrueClient {\n    /**\n     * Namespace for the GoTrue API methods.\n     * These can be used for example to get a user from a JWT in a server environment or reset a user's password.\n     */\n    api: GoTrueApi;\n    /**\n     * The currently logged in user or null.\n     */\n    protected currentUser: User | null;\n    /**\n     * The session object for the currently logged in user or null.\n     */\n    protected currentSession: Session | null;\n    protected autoRefreshToken: boolean;\n    protected persistSession: boolean;\n    protected localStorage: SupportedStorage;\n    protected multiTab: boolean;\n    protected stateChangeEmitters: Map<string, Subscription>;\n    protected refreshTokenTimer?: ReturnType<typeof setTimeout>;\n    /**\n     * Create a new client for use in the browser.\n     * @param options.url The URL of the GoTrue server.\n     * @param options.headers Any additional headers to send to the GoTrue server.\n     * @param options.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n     * @param options.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n     * @param options.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n     * @param options.localStorage Provide your own local storage implementation to use instead of the browser's local storage.\n     * @param options.multiTab Set to \"false\" if you want to disable multi-tab/window events.\n     * @param options.cookieOptions\n     * @param options.fetch A custom fetch implementation.\n     */\n    constructor(options: {\n        url?: string;\n        headers?: {\n            [key: string]: string;\n        };\n        detectSessionInUrl?: boolean;\n        autoRefreshToken?: boolean;\n        persistSession?: boolean;\n        localStorage?: SupportedStorage;\n        multiTab?: boolean;\n        cookieOptions?: CookieOptions;\n        fetch?: Fetch;\n    });\n    /**\n     * Creates a new user.\n     * @type UserCredentials\n     * @param email The user's email address.\n     * @param password The user's password.\n     * @param phone The user's phone number.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param data Optional user metadata.\n     */\n    signUp({ email, password, phone }: UserCredentials, options?: {\n        redirectTo?: string;\n        data?: object;\n        captchaToken?: string;\n    }): Promise<{\n        user: User | null;\n        session: Session | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Log in an existing user, or login via a third-party provider.\n     * @type UserCredentials\n     * @param email The user's email address.\n     * @param password The user's password.\n     * @param refreshToken A valid refresh token that was returned on login.\n     * @param provider One of the providers supported by GoTrue.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param scopes A space-separated list of scopes granted to the OAuth application.\n     */\n    signIn({ email, phone, password, refreshToken, provider, oidc }: UserCredentials, options?: {\n        redirectTo?: string;\n        scopes?: string;\n        captchaToken?: string;\n    }): Promise<{\n        session: Session | null;\n        user: User | null;\n        provider?: Provider;\n        url?: string | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Log in a user given a User supplied OTP received via mobile.\n     * @param phone The user's phone number.\n     * @param token The user's password.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     */\n    verifyOTP({ phone, token }: VerifyOTPParams, options?: {\n        redirectTo?: string;\n    }): Promise<{\n        user: User | null;\n        session: Session | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Inside a browser context, `user()` will return the user data, if there is a logged in user.\n     *\n     * For server-side management, you can get a user through `auth.api.getUserByCookie()`\n     */\n    user(): User | null;\n    /**\n     * Returns the session data, if there is an active session.\n     */\n    session(): Session | null;\n    /**\n     * Force refreshes the session including the user data in case it was updated in a different session.\n     */\n    refreshSession(): Promise<{\n        data: Session | null;\n        user: User | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Updates user data, if there is a logged in user.\n     */\n    update(attributes: UserAttributes): Promise<{\n        data: User | null;\n        user: User | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Sets the session data from refresh_token and returns current Session and Error\n     * @param refresh_token a JWT token\n     */\n    setSession(refresh_token: string): Promise<{\n        session: Session | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Overrides the JWT on the current client. The JWT will then be sent in all subsequent network requests.\n     * @param access_token a jwt access token\n     */\n    setAuth(access_token: string): Session;\n    /**\n     * Gets the session data from a URL string\n     * @param options.storeSession Optionally store the session in the browser\n     */\n    getSessionFromUrl(options?: {\n        storeSession?: boolean;\n    }): Promise<{\n        data: Session | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Inside a browser context, `signOut()` will remove the logged in user from the browser session\n     * and log them out - removing all items from localstorage and then trigger a \"SIGNED_OUT\" event.\n     *\n     * For server-side management, you can disable sessions by passing a JWT through to `auth.api.signOut(JWT: string)`\n     */\n    signOut(): Promise<{\n        error: ApiError | null;\n    }>;\n    /**\n     * Receive a notification every time an auth event happens.\n     * @returns {Subscription} A subscription object which can be used to unsubscribe itself.\n     */\n    onAuthStateChange(callback: (event: AuthChangeEvent, session: Session | null) => void): {\n        data: Subscription | null;\n        error: ApiError | null;\n    };\n    private _handleEmailSignIn;\n    private _handlePhoneSignIn;\n    private _handleProviderSignIn;\n    private _handleOpenIDConnectSignIn;\n    /**\n     * Attempts to get the session from LocalStorage\n     * Note: this should never be async (even for React Native), as we need it to return immediately in the constructor.\n     */\n    private _recoverSession;\n    /**\n     * Recovers the session from LocalStorage and refreshes\n     * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\n     */\n    private _recoverAndRefresh;\n    private _callRefreshToken;\n    private _notifyAllSubscribers;\n    /**\n     * set currentSession and currentUser\n     * process to _startAutoRefreshToken if possible\n     */\n    private _saveSession;\n    private _persistSession;\n    private _removeSession;\n    /**\n     * Clear and re-create refresh token timer\n     * @param value time intervals in milliseconds\n     */\n    private _startAutoRefreshToken;\n    /**\n     * Listens for changes to LocalStorage and updates the current session.\n     */\n    private _listenForMultiTabEvents;\n}\nexport {};\n//# sourceMappingURL=GoTrueClient.d.ts.map"],"names":["GoTrueClient"],"mappings":";;AASe,GAAK,CAACA,YAAY,SAAZA,YAAY;;kBAAZA,YAAY"}