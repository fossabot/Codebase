{"version":3,"sources":["../../../../../../../../../libs/movie/data-access/node_modules/@supabase/gotrue-js/dist/module/GoTrueApi.d.ts"],"sourcesContent":["import { Fetch } from './lib/fetch';\nimport { Session, Provider, AdminUserAttributes, UserAttributes, CookieOptions, User, OpenIDConnectCredentials } from './lib/types';\nimport type { ApiError } from './lib/types';\nexport default class GoTrueApi {\n    protected url: string;\n    protected headers: {\n        [key: string]: string;\n    };\n    protected cookieOptions: CookieOptions;\n    protected fetch?: Fetch;\n    constructor({ url, headers, cookieOptions, fetch, }: {\n        url: string;\n        headers?: {\n            [key: string]: string;\n        };\n        cookieOptions?: CookieOptions;\n        fetch?: Fetch;\n    });\n    /**\n     * Create a temporary object with all configured headers and\n     * adds the Authorization token to be used on request methods\n     * @param jwt A valid, logged-in JWT.\n     */\n    private _createRequestHeaders;\n    private cookieName;\n    /**\n     * Generates the relevant login URL for a third-party provider.\n     * @param provider One of the providers supported by GoTrue.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param scopes A space-separated list of scopes granted to the OAuth application.\n     */\n    getUrlForProvider(provider: Provider, options: {\n        redirectTo?: string;\n        scopes?: string;\n    }): string;\n    /**\n     * Creates a new user using their email address.\n     * @param email The email address of the user.\n     * @param password The password of the user.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param data Optional user metadata.\n     *\n     * @returns A logged-in session if the server has \"autoconfirm\" ON\n     * @returns A user if the server has \"autoconfirm\" OFF\n     */\n    signUpWithEmail(email: string, password: string, options?: {\n        redirectTo?: string;\n        data?: object;\n        captchaToken?: string;\n    }): Promise<{\n        data: Session | User | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Logs in an existing user using their email address.\n     * @param email The email address of the user.\n     * @param password The password of the user.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     */\n    signInWithEmail(email: string, password: string, options?: {\n        redirectTo?: string;\n    }): Promise<{\n        data: Session | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Signs up a new user using their phone number and a password.\n     * @param phone The phone number of the user.\n     * @param password The password of the user.\n     * @param data Optional user metadata.\n     */\n    signUpWithPhone(phone: string, password: string, options?: {\n        data?: object;\n        captchaToken?: string;\n    }): Promise<{\n        data: Session | User | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Logs in an existing user using their phone number and password.\n     * @param phone The phone number of the user.\n     * @param password The password of the user.\n     */\n    signInWithPhone(phone: string, password: string): Promise<{\n        data: Session | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Logs in an OpenID Connect user using their id_token.\n     * @param id_token The IDToken of the user.\n     * @param nonce The nonce of the user. The nonce is a random value generated by the developer (= yourself) before the initial grant is started. You should check the OpenID Connect specification for details. https://openid.net/developers/specs/\n     * @param provider The provider of the user.\n     * @param client_id The clientID of the user.\n     * @param issuer The issuer of the user.\n     */\n    signInWithOpenIDConnect({ id_token, nonce, client_id, issuer, provider, }: OpenIDConnectCredentials): Promise<{\n        data: Session | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Sends a magic login link to an email address.\n     * @param email The email address of the user.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     */\n    sendMagicLinkEmail(email: string, options?: {\n        redirectTo?: string;\n        captchaToken?: string;\n    }): Promise<{\n        data: {} | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Sends a mobile OTP via SMS. Will register the account if it doesn't already exist\n     * @param phone The user's phone number WITH international prefix\n     */\n    sendMobileOTP(phone: string, options?: {\n        captchaToken?: string;\n    }): Promise<{\n        data: {} | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Removes a logged-in session.\n     * @param jwt A valid, logged-in JWT.\n     */\n    signOut(jwt: string): Promise<{\n        error: ApiError | null;\n    }>;\n    /**\n     * Send User supplied Mobile OTP to be verified\n     * @param phone The user's phone number WITH international prefix\n     * @param token token that user was sent to their mobile phone\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     */\n    verifyMobileOTP(phone: string, token: string, options?: {\n        redirectTo?: string;\n    }): Promise<{\n        data: Session | User | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Sends an invite link to an email address.\n     * @param email The email address of the user.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param data Optional user metadata\n     */\n    inviteUserByEmail(email: string, options?: {\n        redirectTo?: string;\n        data?: object;\n    }): Promise<{\n        data: User | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Sends a reset request to an email address.\n     * @param email The email address of the user.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     */\n    resetPasswordForEmail(email: string, options?: {\n        redirectTo?: string;\n        captchaToken?: string;\n    }): Promise<{\n        data: {} | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Generates a new JWT.\n     * @param refreshToken A valid refresh token that was returned on login.\n     */\n    refreshAccessToken(refreshToken: string): Promise<{\n        data: Session | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Set/delete the auth cookie based on the AuthChangeEvent.\n     * Works for Next.js & Express (requires cookie-parser middleware).\n     * @param req The request object.\n     * @param res The response object.\n     */\n    setAuthCookie(req: any, res: any): void;\n    /**\n     * Deletes the Auth Cookies and redirects to the\n     * @param req The request object.\n     * @param res The response object.\n     * @param options Optionally specify a `redirectTo` URL in the options.\n     */\n    deleteAuthCookie(req: any, res: any, { redirectTo }: {\n        redirectTo?: string;\n    }): any;\n    /**\n     * Helper method to generate the Auth Cookie string for you in case you can't use `setAuthCookie`.\n     * @param req The request object.\n     * @param res The response object.\n     * @returns The Cookie string that needs to be set as the value for the `Set-Cookie` header.\n     */\n    getAuthCookieString(req: any, res: any): string[];\n    /**\n     * Generates links to be sent via email or other.\n     * @param type The link type (\"signup\" or \"magiclink\" or \"recovery\" or \"invite\").\n     * @param email The user's email.\n     * @param password User password. For signup only.\n     * @param data Optional user metadata. For signup only.\n     * @param redirectTo The link type (\"signup\" or \"magiclink\" or \"recovery\" or \"invite\").\n     */\n    generateLink(type: 'signup' | 'magiclink' | 'recovery' | 'invite', email: string, options?: {\n        password?: string;\n        data?: object;\n        redirectTo?: string;\n    }): Promise<{\n        data: Session | User | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Creates a new user.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     *\n     * @param attributes The data you want to create the user with.\n     */\n    createUser(attributes: AdminUserAttributes): Promise<{\n        user: null;\n        data: null;\n        error: ApiError;\n    } | {\n        user: User;\n        data: User;\n        error: null;\n    }>;\n    /**\n     * Get a list of users.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n    listUsers(): Promise<{\n        data: null;\n        error: ApiError;\n    } | {\n        data: User[];\n        error: null;\n    }>;\n    /**\n     * Get user by id.\n     *\n     * @param uid The user's unique identifier\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n    getUserById(uid: string): Promise<{\n        data: null;\n        error: ApiError;\n    } | {\n        data: User;\n        error: null;\n    }>;\n    /**\n     * Get user by reading the cookie from the request.\n     * Works for Next.js & Express (requires cookie-parser middleware).\n     */\n    getUserByCookie(req: any, res?: any): Promise<{\n        token: string | null;\n        user: User | null;\n        data: User | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Updates the user data.\n     *\n     * @param attributes The data you want to update.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n    updateUserById(uid: string, attributes: AdminUserAttributes): Promise<{\n        user: User | null;\n        data: User | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Delete a user. Requires a `service_role` key.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     *\n     * @param uid The user uid you want to remove.\n     */\n    deleteUser(uid: string): Promise<{\n        user: User | null;\n        data: User | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Gets the current user details.\n     *\n     * This method is called by the GoTrueClient `update` where\n     * the jwt is set to this.currentSession.access_token\n     * and therefore, acts like getting the currently authenticated used\n     *\n     * @param jwt A valid, logged-in JWT. Typically, the access_token for the currentSession\n     */\n    getUser(jwt: string): Promise<{\n        user: User | null;\n        data: User | null;\n        error: ApiError | null;\n    }>;\n    /**\n     * Updates the user data.\n     * @param jwt A valid, logged-in JWT.\n     * @param attributes The data you want to update.\n     */\n    updateUser(jwt: string, attributes: UserAttributes): Promise<{\n        user: User | null;\n        data: User | null;\n        error: ApiError | null;\n    }>;\n}\n//# sourceMappingURL=GoTrueApi.d.ts.map"],"names":["GoTrueApi"],"mappings":";;AAGe,GAAK,CAACA,SAAS,SAATA,SAAS;CAsT9B,CAAuC,AAAvC,EAAuC,AAAvC,qCAAuC;;kBAtTlBA,SAAS"}