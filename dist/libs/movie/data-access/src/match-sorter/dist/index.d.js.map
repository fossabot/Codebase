{"version":3,"sources":["../../../../../../../libs/movie/data-access/node_modules/match-sorter/dist/index.d.ts"],"sourcesContent":["declare type KeyAttributes = {\n    threshold?: Ranking;\n    maxRanking: Ranking;\n    minRanking: Ranking;\n};\ninterface RankingInfo {\n    rankedValue: string;\n    rank: Ranking;\n    keyIndex: number;\n    keyThreshold: Ranking | undefined;\n}\ninterface ValueGetterKey<ItemType> {\n    (item: ItemType): string | Array<string>;\n}\ninterface IndexedItem<ItemType> {\n    item: ItemType;\n    index: number;\n}\ninterface RankedItem<ItemType> extends RankingInfo, IndexedItem<ItemType> {\n}\ninterface BaseSorter<ItemType> {\n    (a: RankedItem<ItemType>, b: RankedItem<ItemType>): number;\n}\ninterface Sorter<ItemType> {\n    (matchItems: Array<RankedItem<ItemType>>): Array<RankedItem<ItemType>>;\n}\ninterface KeyAttributesOptions<ItemType> {\n    key?: string | ValueGetterKey<ItemType>;\n    threshold?: Ranking;\n    maxRanking?: Ranking;\n    minRanking?: Ranking;\n}\ndeclare type KeyOption<ItemType> = KeyAttributesOptions<ItemType> | ValueGetterKey<ItemType> | string;\ninterface MatchSorterOptions<ItemType = unknown> {\n    keys?: ReadonlyArray<KeyOption<ItemType>>;\n    threshold?: Ranking;\n    baseSort?: BaseSorter<ItemType>;\n    keepDiacritics?: boolean;\n    sorter?: Sorter<ItemType>;\n}\ndeclare const rankings: {\n    readonly CASE_SENSITIVE_EQUAL: 7;\n    readonly EQUAL: 6;\n    readonly STARTS_WITH: 5;\n    readonly WORD_STARTS_WITH: 4;\n    readonly CONTAINS: 3;\n    readonly ACRONYM: 2;\n    readonly MATCHES: 1;\n    readonly NO_MATCH: 0;\n};\ndeclare type Ranking = typeof rankings[keyof typeof rankings];\ndeclare const defaultBaseSortFn: BaseSorter<unknown>;\n/**\n * Takes an array of items and a value and returns a new array with the items that match the given value\n * @param {Array} items - the items to sort\n * @param {String} value - the value to use for ranking\n * @param {Object} options - Some options to configure the sorter\n * @return {Array} - the new sorted array\n */\ndeclare function matchSorter<ItemType = string>(items: ReadonlyArray<ItemType>, value: string, options?: MatchSorterOptions<ItemType>): Array<ItemType>;\ndeclare namespace matchSorter {\n    var rankings: {\n        readonly CASE_SENSITIVE_EQUAL: 7;\n        readonly EQUAL: 6;\n        readonly STARTS_WITH: 5;\n        readonly WORD_STARTS_WITH: 4;\n        readonly CONTAINS: 3;\n        readonly ACRONYM: 2;\n        readonly MATCHES: 1;\n        readonly NO_MATCH: 0;\n    };\n}\nexport { matchSorter, rankings, defaultBaseSortFn };\nexport type { MatchSorterOptions, KeyAttributesOptions, KeyOption, KeyAttributes, RankingInfo, ValueGetterKey, };\n"],"names":["rankings","defaultBaseSortFn","matchSorter"],"mappings":";;QAwEsBA,QAAQ,GAARA,QAAQ;QAAEC,iBAAiB,GAAjBA,iBAAiB;QAAxCC,WAAW,GAAXA,WAAW"}