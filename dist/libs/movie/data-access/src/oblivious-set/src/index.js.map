{"version":3,"sources":["../../../../../../../libs/movie/data-access/node_modules/oblivious-set/src/index.ts"],"sourcesContent":["\n/**\n * this is a set which automatically forgets\n * a given entry when a new entry is set and the ttl\n * of the old one is over\n */\nexport class ObliviousSet<T = any> {\n    public readonly set = new Set();\n    public readonly timeMap = new Map();\n    constructor(\n        public readonly ttl: number\n    ) { }\n\n    has(value: T): boolean {\n        return this.set.has(value);\n    }\n\n    add(value: T): void {\n        this.timeMap.set(value, now());\n        this.set.add(value);\n\n        /**\n         * When a new value is added,\n         * start the cleanup at the next tick\n         * to not block the cpu for more important stuff\n         * that might happen.\n         */\n        setTimeout(() => {\n            removeTooOldValues(this);\n        }, 0);\n    }\n\n    clear() {\n        this.set.clear();\n        this.timeMap.clear();\n    }\n}\n\n\n/**\n * Removes all entries from the set\n * where the TTL has expired\n */\nexport function removeTooOldValues(\n    obliviousSet: ObliviousSet\n) {\n    const olderThen = now() - obliviousSet.ttl;\n    const iterator = obliviousSet.set[Symbol.iterator]();\n\n    /**\n     * Because we can assume the new values are added at the bottom,\n     * we start from the top and stop as soon as we reach a non-too-old value.\n     */\n    while (true) {\n        const value = iterator.next().value;\n        if (!value) {\n            return; // no more elements\n        }\n        const time = obliviousSet.timeMap.get(value);\n        if (time < olderThen) {\n            obliviousSet.timeMap.delete(value);\n            obliviousSet.set.delete(value);\n        } else {\n            // We reached a value that is not old enough\n            return;\n        }\n    }\n}\n\nexport function now(): number {\n    return new Date().getTime();\n}\n\n\n"],"names":["removeTooOldValues","now","ObliviousSet","has","value","set","add","timeMap","setTimeout","clear","ttl","Set","Map","obliviousSet","olderThen","iterator","Symbol","next","time","get","delete","Date","getTime"],"mappings":";QA2CgBA,kBAAkB,GAAlBA,kBAAkB;QA0BlBC,GAAG,GAAHA,GAAG;AA/DZ,GAAK,CAACC,YAAY,SAAZA,YAAY;IAOrBC,GAAG,CAACC,KAAQ,EAAW,CAAC;QACpB,MAAM,CAAC,IAAI,CAACC,GAAG,CAACF,GAAG,CAACC,KAAK;IAC7B,CAAC;IAEDE,GAAG,CAACF,KAAQ,EAAQ,CAAC;QACjB,IAAI,CAACG,OAAO,CAACF,GAAG,CAACD,KAAK,EAAEH,GAAG;QAC3B,IAAI,CAACI,GAAG,CAACC,GAAG,CAACF,KAAK;QAElB,EAKG,AALH;;;;;SAKG,AALH,EAKG,CACHI,UAAU,KAAO,CAAC;YACdR,kBAAkB,CAAC,IAAI;QAC3B,CAAC,EAAE,CAAC;IACR,CAAC;IAEDS,KAAK,GAAG,CAAC;QACL,IAAI,CAACJ,GAAG,CAACI,KAAK;QACd,IAAI,CAACF,OAAO,CAACE,KAAK;IACtB,CAAC;gBAzBmBC,GAAW,CAC7B,CAAC;aADiBA,GAAW,GAAXA,GAAW;QAJ5B,IA8BN,CA7BmBL,GAAG,GAAG,GAAG,CAACM,GAAG;QAD1B,IA8BN,CA5BmBJ,OAAO,GAAG,GAAG,CAACK,GAAG;IAG7B,CAAC;;QALIV,YAAY,GAAZA,YAAY;SAqCTF,kBAAkB,CAC9Ba,YAA0B,EAC5B,CAAC;IACC,KAAK,CAACC,SAAS,GAAGb,GAAG,KAAKY,YAAY,CAACH,GAAG;IAC1C,KAAK,CAACK,QAAQ,GAAGF,YAAY,CAACR,GAAG,CAACW,MAAM,CAACD,QAAQ;IAEjD,EAGG,AAHH;;;KAGG,AAHH,EAGG,OACI,IAAI,CAAE,CAAC;QACV,KAAK,CAACX,KAAK,GAAGW,QAAQ,CAACE,IAAI,GAAGb,KAAK;QACnC,EAAE,GAAGA,KAAK,EAAE,CAAC;YACT,MAAM,CAAE,CAAmB,AAAnB,EAAmB,AAAnB,iBAAmB;QAC/B,CAAC;QACD,KAAK,CAACc,IAAI,GAAGL,YAAY,CAACN,OAAO,CAACY,GAAG,CAACf,KAAK;QAC3C,EAAE,EAAEc,IAAI,GAAGJ,SAAS,EAAE,CAAC;YACnBD,YAAY,CAACN,OAAO,CAACa,MAAM,CAAChB,KAAK;YACjCS,YAAY,CAACR,GAAG,CAACe,MAAM,CAAChB,KAAK;QACjC,CAAC,MAAM,CAAC;YACJ,EAA4C,AAA5C,0CAA4C;YAC5C,MAAM;QACV,CAAC;IACL,CAAC;AACL,CAAC;SAEeH,GAAG,GAAW,CAAC;IAC3B,MAAM,CAAC,GAAG,CAACoB,IAAI,GAAGC,OAAO;AAC7B,CAAC"}