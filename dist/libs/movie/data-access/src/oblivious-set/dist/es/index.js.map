{"version":3,"sources":["../../../../../../../../libs/movie/data-access/node_modules/oblivious-set/dist/es/index.js"],"sourcesContent":["/**\n * this is a set which automatically forgets\n * a given entry when a new entry is set and the ttl\n * of the old one is over\n */\nvar ObliviousSet = /** @class */ (function () {\n    function ObliviousSet(ttl) {\n        this.ttl = ttl;\n        this.set = new Set();\n        this.timeMap = new Map();\n    }\n    ObliviousSet.prototype.has = function (value) {\n        return this.set.has(value);\n    };\n    ObliviousSet.prototype.add = function (value) {\n        var _this = this;\n        this.timeMap.set(value, now());\n        this.set.add(value);\n        /**\n         * When a new value is added,\n         * start the cleanup at the next tick\n         * to not block the cpu for more important stuff\n         * that might happen.\n         */\n        setTimeout(function () {\n            removeTooOldValues(_this);\n        }, 0);\n    };\n    ObliviousSet.prototype.clear = function () {\n        this.set.clear();\n        this.timeMap.clear();\n    };\n    return ObliviousSet;\n}());\nexport { ObliviousSet };\n/**\n * Removes all entries from the set\n * where the TTL has expired\n */\nexport function removeTooOldValues(obliviousSet) {\n    var olderThen = now() - obliviousSet.ttl;\n    var iterator = obliviousSet.set[Symbol.iterator]();\n    /**\n     * Because we can assume the new values are added at the bottom,\n     * we start from the top and stop as soon as we reach a non-too-old value.\n     */\n    while (true) {\n        var value = iterator.next().value;\n        if (!value) {\n            return; // no more elements\n        }\n        var time = obliviousSet.timeMap.get(value);\n        if (time < olderThen) {\n            obliviousSet.timeMap.delete(value);\n            obliviousSet.set.delete(value);\n        }\n        else {\n            // We reached a value that is not old enough\n            return;\n        }\n    }\n}\nexport function now() {\n    return new Date().getTime();\n}\n//# sourceMappingURL=index.js.map"],"names":["removeTooOldValues","now","ObliviousSet","ttl","set","Set","timeMap","Map","prototype","has","value","add","_this","setTimeout","clear","obliviousSet","olderThen","iterator","Symbol","next","time","get","delete","Date","getTime"],"mappings":";QAuCgBA,kBAAkB,GAAlBA,kBAAkB;QAuBlBC,GAAG,GAAHA,GAAG;;AA9DnB,EAIG,AAJH;;;;CAIG,AAJH,EAIG,CACH,GAAG,CAACC,YAAY,GAAG,EAAa,AAAb,SAAa,AAAb,EAAa,CAAE,QAAQ,GAAI,CAAC;aAClCA,aAAY,CAACC,GAAG,EAAE,CAAC;QACxB,IAAI,CAACA,GAAG,GAAGA,GAAG;QACd,IAAI,CAACC,GAAG,GAAG,GAAG,CAACC,GAAG;QAClB,IAAI,CAACC,OAAO,GAAG,GAAG,CAACC,GAAG;IAC1B,CAAC;IACDL,aAAY,CAACM,SAAS,CAACC,GAAG,GAAG,QAAQ,CAAEC,KAAK,EAAE,CAAC;QAC3C,MAAM,CAAC,IAAI,CAACN,GAAG,CAACK,GAAG,CAACC,KAAK;IAC7B,CAAC;IACDR,aAAY,CAACM,SAAS,CAACG,GAAG,GAAG,QAAQ,CAAED,KAAK,EAAE,CAAC;QAC3C,GAAG,CAACE,KAAK,GAAG,IAAI;QAChB,IAAI,CAACN,OAAO,CAACF,GAAG,CAACM,KAAK,EAAET,GAAG;QAC3B,IAAI,CAACG,GAAG,CAACO,GAAG,CAACD,KAAK;QAClB,EAKG,AALH;;;;;SAKG,AALH,EAKG,CACHG,UAAU,CAAC,QAAQ,GAAI,CAAC;YACpBb,kBAAkB,CAACY,KAAK;QAC5B,CAAC,EAAE,CAAC;IACR,CAAC;IACDV,aAAY,CAACM,SAAS,CAACM,KAAK,GAAG,QAAQ,GAAI,CAAC;QACxC,IAAI,CAACV,GAAG,CAACU,KAAK;QACd,IAAI,CAACR,OAAO,CAACQ,KAAK;IACtB,CAAC;IACD,MAAM,CAACZ,aAAY;AACvB,CAAC;QACQA,YAAY,GAAZA,YAAY;SAKLF,kBAAkB,CAACe,YAAY,EAAE,CAAC;IAC9C,GAAG,CAACC,SAAS,GAAGf,GAAG,KAAKc,YAAY,CAACZ,GAAG;IACxC,GAAG,CAACc,QAAQ,GAAGF,YAAY,CAACX,GAAG,CAACc,MAAM,CAACD,QAAQ;IAC/C,EAGG,AAHH;;;KAGG,AAHH,EAGG,OACI,IAAI,CAAE,CAAC;QACV,GAAG,CAACP,KAAK,GAAGO,QAAQ,CAACE,IAAI,GAAGT,KAAK;QACjC,EAAE,GAAGA,KAAK,EAAE,CAAC;YACT,MAAM,CAAE,CAAmB,AAAnB,EAAmB,AAAnB,iBAAmB;QAC/B,CAAC;QACD,GAAG,CAACU,IAAI,GAAGL,YAAY,CAACT,OAAO,CAACe,GAAG,CAACX,KAAK;QACzC,EAAE,EAAEU,IAAI,GAAGJ,SAAS,EAAE,CAAC;YACnBD,YAAY,CAACT,OAAO,CAACgB,MAAM,CAACZ,KAAK;YACjCK,YAAY,CAACX,GAAG,CAACkB,MAAM,CAACZ,KAAK;QACjC,CAAC,MACI,CAAC;YACF,EAA4C,AAA5C,0CAA4C;YAC5C,MAAM;QACV,CAAC;IACL,CAAC;AACL,CAAC;SACeT,GAAG,GAAG,CAAC;IACnB,MAAM,CAAC,GAAG,CAACsB,IAAI,GAAGC,OAAO;AAC7B,CAAC,AACD,CAAiC,AAAjC,EAAiC,AAAjC,+BAAiC"}