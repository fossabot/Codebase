{"version":3,"sources":["../../../../../../libs/movie/data-access/node_modules/typedarray-to-buffer/index.js"],"sourcesContent":["/**\n * Convert a typed array to a Buffer without a copy\n *\n * Author:   Feross Aboukhadijeh <https://feross.org>\n * License:  MIT\n *\n * `npm install typedarray-to-buffer`\n */\n\nvar isTypedArray = require('is-typedarray').strict\n\nmodule.exports = function typedarrayToBuffer (arr) {\n  if (isTypedArray(arr)) {\n    // To avoid a copy, use the typed array's underlying ArrayBuffer to back new Buffer\n    var buf = Buffer.from(arr.buffer)\n    if (arr.byteLength !== arr.buffer.byteLength) {\n      // Respect the \"view\", i.e. byteOffset and byteLength, without doing a copy\n      buf = buf.slice(arr.byteOffset, arr.byteOffset + arr.byteLength)\n    }\n    return buf\n  } else {\n    // Pass through all other types to `Buffer.from`\n    return Buffer.from(arr)\n  }\n}\n"],"names":["isTypedArray","require","strict","module","exports","typedarrayToBuffer","arr","buf","Buffer","from","buffer","byteLength","slice","byteOffset"],"mappings":";AAAA,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,CAEH,GAAG,CAACA,YAAY,GAAGC,OAAO,CAAC,CAAe,gBAAEC,MAAM;AAElDC,MAAM,CAACC,OAAO,GAAG,QAAQ,CAACC,kBAAkB,CAAEC,GAAG,EAAE,CAAC;IAClD,EAAE,EAAEN,YAAY,CAACM,GAAG,GAAG,CAAC;QACtB,EAAmF,AAAnF,iFAAmF;QACnF,GAAG,CAACC,GAAG,GAAGC,MAAM,CAACC,IAAI,CAACH,GAAG,CAACI,MAAM;QAChC,EAAE,EAAEJ,GAAG,CAACK,UAAU,KAAKL,GAAG,CAACI,MAAM,CAACC,UAAU,EAAE,CAAC;YAC7C,EAA2E,AAA3E,yEAA2E;YAC3EJ,GAAG,GAAGA,GAAG,CAACK,KAAK,CAACN,GAAG,CAACO,UAAU,EAAEP,GAAG,CAACO,UAAU,GAAGP,GAAG,CAACK,UAAU;QACjE,CAAC;QACD,MAAM,CAACJ,GAAG;IACZ,CAAC,MAAM,CAAC;QACN,EAAgD,AAAhD,8CAAgD;QAChD,MAAM,CAACC,MAAM,CAACC,IAAI,CAACH,GAAG;IACxB,CAAC;AACH,CAAC"}